<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>关于FOC的学习笔记</title>
      <link href="/blog/2020/04/08/moter/"/>
      <url>/blog/2020/04/08/moter/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>由于普通无刷和有刷直流电机总是存在控制精度不够、旋转过程不平滑、扭矩抖动（没通电时转动的颗粒感）等等问题，所以本次主要研究永磁同步电机PMSM</p><p>永磁同步电机是复杂的非线性系统，为了简化模型，实现控制上的解耦，需要建立相应的坐标变换，即Clark变换和Park变换</p><h1 id="1-驱动电路实现"><a href="#1-驱动电路实现" class="headerlink" title="1.驱动电路实现"></a>1.驱动电路实现</h1><p>无刷电机的驱动电路主要使用三项逆变电路来实现：</p><p><img src="0.png"></p><p>所谓<strong>逆变电路</strong>，即把<strong>直流电</strong>变换为<strong>交流电</strong>，或者简单点说就是一个可以产生不同电流流向的电路，通过前面的电机模型分析我们也可以看出，对于无刷电机的驱动是需要在不同时刻施加不同方向的电压（电流）的，因此需要逆变电路。</p><p>而逆变电路具体的实现则一般是采用<strong>半桥MOS电路</strong>来制作的。半桥电路的原型如下，其实很简单，就是两个MOS管组成的<strong>上桥臂</strong>和<strong>下桥臂</strong>，中间引出一条输出线：</p><p><img src="1.png"></p><p>用3个半桥电路就可以组合成三相逆变电路，每个半桥引出的一根输出线跟无刷电机的一根相线相连，就完成了最基本的无刷驱动电路。</p><p>原理方面，MOS管可以看作电压控制的高速电子开关，在MOS管的栅极（上图中的High Drive和Low Drive）施加高电平或者低电平，就可以控制MOS源极和漏极的导通或者关闭。比如在下图中，我们打开第一组半桥的上桥臂、第二组和第三组半桥的下桥臂（其余的关闭），那么就可以让电流<strong>从电源正极流过电机的a相，流经b、c相，然后回到电源负极</strong>：</p><p><img src="2.png"></p><p>于是通过控制三个半桥的不同开关状态，我们可以控制电流在电机中的不同流向了。</p><p><img src="4.gif"></p><p>在坐标系电压满足以下公式：</p><p><img src="5.png"></p><p>上述部分摘自<a href="http://pengzhihui.xyz/2020/07/02/foc/">博客</a></p><h1 id="2-三相电机波形"><a href="#2-三相电机波形" class="headerlink" title="2.三相电机波形"></a>2.三相电机波形</h1><p>在研究模型之前，我们先来观察一下三相电机的三相输出电压（反电动势产生的电压）</p><p>实际上也就是3根相位不同的正弦波：</p><p><img src="3.png"></p><p><em>三相发电机的发电原理就是这样，输出的就是三相幅值为220V的交流电，（线电压为380V，即根号三</em>220V）</p><p>发电机反过来就是电动机，如果对电机输入上面那种三相正弦电压（更换合适的幅值），那么就可以驱动无刷电机平稳高效的运转了</p><p>这就是FOC驱动电机的基本手段，即通过计算所需电压矢量，使用SVPWM技术产生调试型号，驱动三相逆变电路，合成出等效的三相正弦电压驱动电机</p><h2 id="2-1FOC控制原理"><a href="#2-1FOC控制原理" class="headerlink" title="2.1FOC控制原理"></a>2.1FOC控制原理</h2><p>老规矩，在了解之前我们先来看看FOC控制的整个流程图（这是电流环——内环）：</p><p><img src="4.png"></p><p>这个图挺复杂的，这里我来简单的解释一下：</p><p>Iq_Ref是q轴(交轴)电流设定值，Id_Ref是d轴(直轴)电流设定，关于交轴直轴不再介绍，大家自行百度</p><p> Ia, Ib, Ic分别是A相、B相、C相的采样电流，是可以直接通过AD采样得到的，通常直接采样其中两相，利用公式Ia+Ib+Ic=0计算得到第三相，电角度θ可以通过实时读取磁编码器的值计算得到</p><p>在得到三相电流和电角度后，即可以进行电流环的执行了：三相电流Ia, Ib, Ic经过Clark变换得到Iα, Iβ；然后经过Park变换得到Iq, Id；然后分别与他们的设定值Iq_Ref, Id_Ref计算误差值；然后分别将q轴电流误差值代入q轴电流PI环计算得到Vq，将d轴电流误差值代入d轴电流PI环计算得到Vd；然后对Vq, Vd进行反Park变换得到Vα, Vβ；然后经过SVPWM算法得到Va, Vb, Vc，最后输入到电机三相上。这样就完成了一次电流环的控制</p><p>当对PMSM进行速度控制的时候，需要在电流环外面加一个速度环，控制框图如下：</p><p><img src="6.png"></p><p>Speed_Ref是速度设定值，ω是电机的转速反馈，可以通过电机编码器计算得到， 将计算得到的电机速度ω与速度设定值Speed_Ref进行误差值计算，代入速度PI环，计算的结果作为电流环的输入</p><p>比较图二和图一的电流环部分可以发现，图二中d轴电流被设定为零(Id_Ref=0)，因为d轴电流对于驱动电机的转动不会产生输出力，所以通常情况下都会将d轴电流设定为零(但不是总是设定为0的)；当Id_Ref=0时，Iq_Ref就等于了速度环的输出；再结合上面的电流环，就实现了速度电流的双闭环控制</p><p>由于速度环在电子转动速度较慢时控制不精确的原因，我们将速度环改成位置环：</p><p><img src="7.png"></p><p>由于去掉了速度环，这里的位置环我们使用完整的<strong>PID控制</strong>，即把微分项加上（因为位置的微分就是速度，这样可以减小位置控制的震荡加快收敛；积分项的作用是为了消除静态误差）</p><p>这个图中除了PID以外，还有些东西没有解释：</p><ul><li>SVPWM</li><li>Clark</li><li>Park/RevPark</li></ul><h2 id="2-2Clark与Park变换"><a href="#2-2Clark与Park变换" class="headerlink" title="2.2Clark与Park变换"></a>2.2Clark与Park变换</h2><p>上文提到，如果要使得电机能够平稳丝滑的转动，那么就需要生成相位差为120°的三个正弦波，由于我们的MOS管只有开/关两种状态，所以如何生成变化的正弦波呢？</p><p>在PWM技术中有一种SPWM波，生成其的技术很简单，只需要让PWM的脉宽随着sin函数变化就可以，生成的波经过低通滤波器之后，就可以的到一条正弦波，如果用SPWM生成三条存在一定相位差的正弦波那么是不是就可以合成SVPWM呢？</p><p>很显然这种办法十分的麻烦，而且我们并不好在某一个时刻地里的控制电机的三相电压（据大佬说SPWM比SVPWM的利用率要低15%），所以我们要选用一种简单的方法</p><h3 id="2-2-1Clark变换"><a href="#2-2-1Clark变换" class="headerlink" title="2.2.1Clark变换"></a>2.2.1Clark变换</h3><p>根据基尔霍夫电流定律，我们可以得到：</p><p>I_a+I_b+I_c=0</p><p>由此可知，只要我们知道其中两个，就可以根据公式计算出另一个</p><p><img src="8.png"></p><p>上图可以看见，在这个二维坐标系中，三相电流的分布</p><p>我们可以通过一定的变换，将它映射为Iα, Iβ</p><p>这其实就是个简单的投影计算，矩阵式如下：</p><p><img src="9.png"></p><p>变换结果如下：</p><p><img src="10.png"></p><p>动图：</p><p><img src="6.gif"></p><p>现在我们只需要控制Iα, Iβ就可以控制电机旋转了</p><p>但是，要注意的是，当我们实际控制电机的时候，要将Iα, Iβ反变换回去</p><p>这样一来依然很麻烦，因为我们控制的依然还是正弦波，不过是少了一个相的控制</p><p>这里我们可以引入Park变换</p><h3 id="2-2-2Park变换"><a href="#2-2-2Park变换" class="headerlink" title="2.2.2Park变换"></a>2.2.2Park变换</h3><p><img src="11.png"></p><p>上图是变换公式，θ是转子当前角度</p><p>矩阵式：</p><p><img src="12.png"></p><p>由于θ是转子当前角度，所以Park变换之后的坐标系是跟着转子旋转的</p><p>变换之后的变量已经成了一个线性的，甚至是一数，如果我们向编码器输入一个实时角度，经过这一步变换，我们可以看到，一个匀速旋转的向量在这个坐标系下变成了一个定值</p><p>动图：</p><p><img src="7.gif"></p><h3 id="2-2-3SVPWM"><a href="#2-2-3SVPWM" class="headerlink" title="2.2.3SVPWM"></a>2.2.3SVPWM</h3><p>SVPWM的全称是空间矢量脉宽调制(Space Vector Pulse Width Modulation)，是由三相功率逆变器的六个功率开关元件组成的特定开关模式产生的脉宽调制波，能够使输出电流波形尽可能接近于理想的正弦波形。理论基础是平均值等效原理，即在一个开关周期内通过对基本电压矢量加 以组合，使其平均值与给定电压矢量相等</p><p>将母线电压写为三相电压为：</p><p><img src="13.png"></p><p>下面讨论一下空间电压矢量：</p><p><img src="0.png"></p><p>由于三相逆变电路在某一个时刻只会有一个臂导通，所以我们可以得到八种开关方式，其中有六种是非零向量</p><p><img src="14.png"></p><p>由此，我们可以的到一个电压矢量的坐标图：</p><p><img src="15.png"></p><p>和电压矢量表：</p><p><img src="16.png"></p><p>由于这六个扇区只能产生六个方向的力矩，如果需要产生任意方向的力矩，我们需要引入SVPWM</p><p>按照伏秒平衡原则来合成每个扇区内的任意电压矢量，即：</p><p><img src="17.png"></p><p>离散形式：</p><p><img src="18.png"></p><p>式子中的Uref是我们期望得到的电压矢量，T是一个PWM周期。</p><p>Ux,Uy是用于合成Uref的两个空间电压矢量，是六个基向量之中的两个，是哪两个与所在扇区有关</p><p>上面公式的含义就是：<strong>我们可以周期性地在不同空间电压矢量之间切换，只要合理地配置不同基向量在一个周期中的占空比，就可以合成出等效的任意空间电压矢量了</strong></p><p>这与PWM的思想非常相像，也就是它名字的来源SVPWM（空间电压矢量脉宽调制）</p><p>举个例子，当Uref在U4与U6之间：</p><p><img src="19.png"></p><p>现在一个周期内所有状态的持续时间我们都得到了，还差一个顺序，也就是<strong>各个状态切换的顺序</strong>。</p><p>虽然说任意顺序都可以，但是我们需要考虑MOS的损耗问题，所以尽可能的减少MOS管的开关次数，如下图：</p><p><img src="20.jpg"></p><p>上图中可以看出来，在每个状态切换的时候，都只有一个相发生了转变：<strong>000</strong>-&gt;<strong>100</strong>-&gt;<strong>110</strong>-&gt;<strong>111</strong>-&gt;<strong>110</strong>-&gt;<strong>100</strong>-&gt;<strong>000，</strong>这也是所谓的七段式SVPWM调制法</p><p>同时我们通过在合理的位置插入两个零矢量，并且对零矢量在时间上进行了平均分配，以使产生的PWM对称，从而有效地降低了PWM的谐波分量</p><p>同理，我们也可以列出在其他扇区时的切换顺序：</p><p><img src="21.jpg"></p><p>至此，SVPWM的工作完成了，我们得到了每一时刻所需要的空间电压矢量以及它们持续的时间，在处理器中赋值给对应通道的捕获比较寄存器产生相应的三个PWM波形，控制MOS管的开关，进而产生我们期望的电压、电流、力矩</p><p>以上就是对原理的阐述，下面有一些我自己的见解和补充</p><h1 id="3-SVPWM算法原理部分补充"><a href="#3-SVPWM算法原理部分补充" class="headerlink" title="3.SVPWM算法原理部分补充"></a>3.SVPWM算法原理部分补充</h1><p> SVPWM是近年发展的一种比较新颖的控制方法，是由三相功率逆变器的六个功率开关元件组成的特定开关模式产生的脉宽调制波，能够使输出电流波形尽可能接近于理想的正弦波形。空间电压矢量PWM与传统的正弦PWM不同，它是从三相输出电压的整体效果出发，着眼于如何<strong>使电机获得理想圆形磁链轨迹</strong>。SVPWM技术与SPWM相比较，绕组电流波形的谐波成分小，使得电机转矩脉动降低，旋转磁场更逼近圆形，而且使直流母线电压的利用率有了很大提高，且更易于实现数字化（这就是为何SPWM能量损耗高于SVPWM的原因了）</p><p>通俗化理解：把PMSM想象成两块同心的磁铁，两块磁铁是相吸的，因此当用手拨动外面的磁铁绕组圆心转动时，里面的磁铁也会跟着转动，这其实就是PMSM的本质了。PMSM的转子是永磁铁，定子是绕组，我们用电路控制定子绕组产生旋转的磁场，里面的转子磁铁就会跟着转动，这个磁场的大小最好恒定，不然一会儿大一会儿小，转子受到的牵引力也就一会儿大一会儿小，影响运动性能。好了，现在我们知道电机的本质是什么了。接下来，我们需要一个算法来控制定子绕组的输出，使其产生一个恒定的旋转磁场，这个算法就是SVPWM</p><p>要得到一个恒定大小的旋转磁场，可以先来得到一个恒定大小的旋转电压矢量。如下图：</p><p><img src="5.gif"></p><hr><p>在SPWM中，占空比越大，电压越大；占空比越小，电压越小。让占空比呈正弦变化，电压值自然也就呈正弦变化了</p><hr><p>我们如何判断自己在那个扇区呢？</p><p>由于相电压同一时刻不会同为零同为一，所以我们可以用一个式子来判断，令N=4C+2B+A</p><p>A为Ua</p><p>B为Ub</p><p>C为Uc</p><p>通过下表可以的到扇区对应关系</p><p><img src="26.png"></p><hr><p>下面是六个扇区对应的完整版</p><p><img src="23.png"></p><p><img src="24.png"></p><hr><p>所有扇区矢量作用时间</p><p><img src="25.png"></p><hr><p>经过上面的补充，FOC与SVPWM的对接就变成了，先根据N=4<em>C+2</em>B+A判断合成矢量所在扇区，然后查表2-4得出两非零矢量的作用时间，最后得出三相开关管PWM波的占空比，查表让算法更高效</p><hr><p><img src="27.png"></p><p>由此公式可知：</p><p>当两个零电压矢量作用时间为0时，一个PWM周期内非零电压矢量的作用时间最长，此时的合成空间电压矢量幅值最大，由下图可知其幅值最大不会超过图中所示的正六边形边界。而当合成矢量落在该边界之外时，将发生过调制，逆变器输出电压波形将发生失真。在SVPWM调制模式下，逆变器能够输出的最大不失真圆形旋转电压矢量为图2-12所示虚线正六边形的内切圆，其幅值为： (√3/ 2)x(2<em>U**dc</em>/ 3) =√3<em>U**dc</em>/3 。即逆变器输出的不失真最大正弦相电压幅值为√3<em>U**dc</em> /3 ，而若采用三相SPWM调制，逆变器能输出的不失真 最大正弦相电压幅值为<em>Udc</em>/2。显然SVPWM 调制模式下对直流侧电压利用率更高，它们的直流利用率之比为(√3<em>U**dc</em>/ 3) /(<em>U**dc</em>/ 2) =1.1547 ，即SVPWM算法比SPWM算法的直流电压利用率提高了15.47%（这就是上述文章中15%的来源）</p><p><img src="28.png"></p><p>如图当合成电压矢量端点落在正六边形与外接圆之间时，已发生过调制，输出电压将发生失真，必须采取过调制处理，这里采用一种比例缩小算法。定义每个扇区中先发生的矢量用为<em>Tx</em>，后发生的矢量为 <em>Ty</em>。当 <em>Tx+Ty</em>≤<em>TS</em>时，矢量端点在正六边形之内，不发生过调制；当<em>Tx+Ty</em>&gt;<em>TS</em>时，矢量端点超出正六边形，发生过调制。输出的波形会出现严重的失真，需采取以下措施：</p><p>设将电压矢量端点轨迹端点拉回至正六边形内切圆内时两非零矢量作用时间分别为 <em>Tx</em>‘，<em>Ty</em>‘，则有比例关系：</p><p><img src="29.png"></p><p>使用上面的简单比例关系，把两个非零矢量作用时间矫正好</p><p><img src="30.png"></p><p>taon、tbon、tcon的波形呈马鞍形，如下：</p><p><img src="31.png"></p><p>参考：</p><p><a href="https://zhuanlan.zhihu.com/p/147659820">https://zhuanlan.zhihu.com/p/147659820</a></p><p><a href="https://blog.csdn.net/qlexcel/article/details/74787619#comments">https://blog.csdn.net/qlexcel/article/details/74787619#comments</a></p><p>更详细的公式推导请见</p><p><a href="https://zhuanlan.zhihu.com/p/47766452">https://zhuanlan.zhihu.com/p/47766452</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 电机控制 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 电机控制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Opencv学习笔记</title>
      <link href="/blog/2020/04/03/cv-0/"/>
      <url>/blog/2020/04/03/cv-0/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>计算机视觉在生活中已经成为了一个不可或缺的部分，下面就来总结一下我过去所学的那些关于Opencv的知识</p><h1 id="1-Opencv环境搭建"><a href="#1-Opencv环境搭建" class="headerlink" title="1.Opencv环境搭建"></a>1.Opencv环境搭建</h1><p>准备工作如下</p><ul><li><p>安装Python</p></li><li><p>安装pip插件</p></li><li><p>安装相关依赖包：numpy等</p></li><li><pre><code>pip install opencv-pythonpythonimport cv2cv2.__version__</code></pre></li></ul><h1 id="2-Opencv教程"><a href="#2-Opencv教程" class="headerlink" title="2.Opencv教程"></a>2.Opencv教程</h1><h2 id="2-1打开摄像头"><a href="#2-1打开摄像头" class="headerlink" title="2.1打开摄像头"></a>2.1打开摄像头</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> cv2capture <span class="token operator">=</span> cv2<span class="token punctuation">.</span>VideoCapture<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#调用电脑默认摄像头</span>capture<span class="token punctuation">.</span>open<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#打开电脑默认摄像头</span><span class="token keyword">while</span><span class="token punctuation">(</span>capture<span class="token punctuation">.</span>isOpened<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    ret<span class="token punctuation">,</span>frame <span class="token operator">=</span> capture<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#ret调用成功或失败，frame获取到的画面是一个numpy数组</span>    cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">'frame'</span><span class="token punctuation">,</span>frame<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#展示摄像头所捕获的画面，第一个参数是窗口名</span>    key_<span class="token operator">=</span>cv2<span class="token punctuation">.</span>waitKey<span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#每60ms获取按键键值</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>key_<span class="token punctuation">)</span>    <span class="token keyword">if</span> key_ <span class="token operator">==</span> <span class="token number">27</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true">#这里27是Esc对应的键值</span>        <span class="token keyword">break</span>capture<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#关闭摄像头</span>cv2<span class="token punctuation">.</span>destroyAllWindows<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#关闭窗口</span></code></pre><p>上面是一个简单的调用摄像头的案例，其中键盘对应键值与ASCII有关</p><h2 id="2-2调用边缘检测"><a href="#2-2调用边缘检测" class="headerlink" title="2.2调用边缘检测"></a>2.2调用边缘检测</h2><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#边缘检测</span><span class="token keyword">import</span> cv2<span class="token comment" spellcheck="true"># 回调函数，x表示滑块的位置，本例暂不使用</span><span class="token keyword">def</span> <span class="token function">nothing</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span>capture <span class="token operator">=</span> cv2<span class="token punctuation">.</span>VideoCapture<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>namedWindow<span class="token punctuation">(</span><span class="token string">'frame'</span><span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>createTrackbar<span class="token punctuation">(</span><span class="token string">'MAX'</span><span class="token punctuation">,</span> <span class="token string">'frame'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> nothing<span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>createTrackbar<span class="token punctuation">(</span><span class="token string">'MIN'</span><span class="token punctuation">,</span> <span class="token string">'frame'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> nothing<span class="token punctuation">)</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    MAX <span class="token operator">=</span> cv2<span class="token punctuation">.</span>getTrackbarPos<span class="token punctuation">(</span><span class="token string">'MAX'</span><span class="token punctuation">,</span> <span class="token string">'frame'</span><span class="token punctuation">)</span>    MIN <span class="token operator">=</span> cv2<span class="token punctuation">.</span>getTrackbarPos<span class="token punctuation">(</span><span class="token string">'MIN'</span><span class="token punctuation">,</span> <span class="token string">'frame'</span><span class="token punctuation">)</span>    ret<span class="token punctuation">,</span> frame <span class="token operator">=</span> capture<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    edges <span class="token operator">=</span> cv2<span class="token punctuation">.</span>Canny<span class="token punctuation">(</span>frame<span class="token punctuation">,</span> MIN<span class="token punctuation">,</span> MAX<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># canny边缘检测</span>    teer <span class="token operator">=</span> np<span class="token punctuation">.</span>dstack<span class="token punctuation">(</span><span class="token punctuation">(</span>edges<span class="token punctuation">,</span>edges<span class="token punctuation">,</span>edges<span class="token punctuation">)</span><span class="token punctuation">)</span>    cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">'frame'</span><span class="token punctuation">,</span> edges<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 展示摄像头所捕获的画面</span>    cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">'teer'</span><span class="token punctuation">,</span> teer<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 展示摄像头所捕获的画面</span>    <span class="token keyword">if</span> cv2<span class="token punctuation">.</span>waitKey<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">27</span><span class="token punctuation">:</span>        <span class="token keyword">break</span>capture<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#关闭摄像头</span>cv2<span class="token punctuation">.</span>destroyAllWindows<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#关闭窗口</span></code></pre><p>上面是一个自带滑块可调区间的边缘检测程序</p><h2 id="2-3笑脸检测"><a href="#2-3笑脸检测" class="headerlink" title="2.3笑脸检测"></a>2.3笑脸检测</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> cv2<span class="token comment" spellcheck="true"># 载入人脸检测器、眼睛检测器、微笑检测器三个级联检测器</span>face_cascade <span class="token operator">=</span> cv2<span class="token punctuation">.</span>CascadeClassifier<span class="token punctuation">(</span>cv2<span class="token punctuation">.</span>data<span class="token punctuation">.</span>haarcascades<span class="token operator">+</span><span class="token string">'haarcascade_frontalface_default.xml'</span><span class="token punctuation">)</span>eye_cascade <span class="token operator">=</span> cv2<span class="token punctuation">.</span>CascadeClassifier<span class="token punctuation">(</span>cv2<span class="token punctuation">.</span>data<span class="token punctuation">.</span>haarcascades<span class="token operator">+</span><span class="token string">'haarcascade_eye.xml'</span><span class="token punctuation">)</span>smile_cascade <span class="token operator">=</span> cv2<span class="token punctuation">.</span>CascadeClassifier<span class="token punctuation">(</span>cv2<span class="token punctuation">.</span>data<span class="token punctuation">.</span>haarcascades<span class="token operator">+</span><span class="token string">'haarcascade_smile.xml'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 调用摄像头</span>cap <span class="token operator">=</span> cv2<span class="token punctuation">.</span>VideoCapture<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 获取摄像头拍摄到的画面</span>    ret<span class="token punctuation">,</span> frame <span class="token operator">=</span> cap<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    faces <span class="token operator">=</span> face_cascade<span class="token punctuation">.</span>detectMultiScale<span class="token punctuation">(</span>frame<span class="token punctuation">,</span> <span class="token number">1.3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>    img <span class="token operator">=</span> frame    <span class="token keyword">for</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>w<span class="token punctuation">,</span>h<span class="token punctuation">)</span> <span class="token keyword">in</span> faces<span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 画出人脸框，蓝色，画笔宽度微</span>        img <span class="token operator">=</span> cv2<span class="token punctuation">.</span>rectangle<span class="token punctuation">(</span>img<span class="token punctuation">,</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>x<span class="token operator">+</span>w<span class="token punctuation">,</span>y<span class="token operator">+</span>h<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 框选出人脸区域，在人脸区域而不是全图中进行人眼检测，节省计算资源</span>        face_area <span class="token operator">=</span> img<span class="token punctuation">[</span>y<span class="token punctuation">:</span>y<span class="token operator">+</span>h<span class="token punctuation">,</span> x<span class="token punctuation">:</span>x<span class="token operator">+</span>w<span class="token punctuation">]</span>        <span class="token comment" spellcheck="true">## 人眼检测</span>        <span class="token comment" spellcheck="true"># 用人眼级联分类器引擎在人脸区域进行人眼识别，返回的eyes为眼睛坐标列表</span>        eyes <span class="token operator">=</span> eye_cascade<span class="token punctuation">.</span>detectMultiScale<span class="token punctuation">(</span>face_area<span class="token punctuation">,</span><span class="token number">1.3</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>ex<span class="token punctuation">,</span>ey<span class="token punctuation">,</span>ew<span class="token punctuation">,</span>eh<span class="token punctuation">)</span> <span class="token keyword">in</span> eyes<span class="token punctuation">:</span>            <span class="token comment" spellcheck="true">#画出人眼框，绿色，画笔宽度为1</span>            cv2<span class="token punctuation">.</span>rectangle<span class="token punctuation">(</span>face_area<span class="token punctuation">,</span><span class="token punctuation">(</span>ex<span class="token punctuation">,</span>ey<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>ex<span class="token operator">+</span>ew<span class="token punctuation">,</span>ey<span class="token operator">+</span>eh<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">## 微笑检测</span>        <span class="token comment" spellcheck="true"># 用微笑级联分类器引擎在人脸区域进行人眼识别，返回的eyes为眼睛坐标列表</span>        smiles <span class="token operator">=</span> smile_cascade<span class="token punctuation">.</span>detectMultiScale<span class="token punctuation">(</span>face_area<span class="token punctuation">,</span>scaleFactor<span class="token operator">=</span> <span class="token number">1.16</span><span class="token punctuation">,</span>minNeighbors<span class="token operator">=</span><span class="token number">65</span><span class="token punctuation">,</span>minSize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">,</span>flags<span class="token operator">=</span>cv2<span class="token punctuation">.</span>CASCADE_SCALE_IMAGE<span class="token punctuation">)</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>ex<span class="token punctuation">,</span>ey<span class="token punctuation">,</span>ew<span class="token punctuation">,</span>eh<span class="token punctuation">)</span> <span class="token keyword">in</span> smiles<span class="token punctuation">:</span>            <span class="token comment" spellcheck="true">#画出微笑框，红色（BGR色彩体系），画笔宽度为1</span>            cv2<span class="token punctuation">.</span>rectangle<span class="token punctuation">(</span>face_area<span class="token punctuation">,</span><span class="token punctuation">(</span>ex<span class="token punctuation">,</span>ey<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>ex<span class="token operator">+</span>ew<span class="token punctuation">,</span>ey<span class="token operator">+</span>eh<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>            cv2<span class="token punctuation">.</span>putText<span class="token punctuation">(</span>img<span class="token punctuation">,</span><span class="token string">'Smile'</span><span class="token punctuation">,</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token number">-7</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1.2</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>LINE_AA<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 实时展示效果画面</span>    cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">'frame2'</span><span class="token punctuation">,</span>img<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 每5毫秒监听一次键盘动作</span>    <span class="token keyword">if</span> cv2<span class="token punctuation">.</span>waitKey<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span> <span class="token operator">==</span> ord<span class="token punctuation">(</span><span class="token string">'q'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">break</span><span class="token comment" spellcheck="true"># 最后，关闭所有窗口</span>cap<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>destroyAllWindows<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>上面是一个微笑检测的程序，检测效果一般</p><h2 id="2-4图片处理"><a href="#2-4图片处理" class="headerlink" title="2.4图片处理"></a>2.4图片处理</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> cv2<span class="token comment" spellcheck="true"># 读入本地图像文件</span>img <span class="token operator">=</span> cv2<span class="token punctuation">.</span>imread<span class="token punctuation">(</span><span class="token string">'logo.png'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 在窗口中显示图像</span>cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">"Display window"</span><span class="token punctuation">,</span> img<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 获取键盘按键动作，如果按下s键，就将图像保存至本地</span>k <span class="token operator">=</span> cv2<span class="token punctuation">.</span>waitKey<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 0表示永久等待键盘按键，15表示等待15毫秒</span><span class="token keyword">if</span> k <span class="token operator">==</span> ord<span class="token punctuation">(</span><span class="token string">"s"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    cv2<span class="token punctuation">.</span>imwrite<span class="token punctuation">(</span><span class="token string">"saved_img.png"</span><span class="token punctuation">,</span> img<span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>destroyAllWindows<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>简单的导入导出图片</p><h2 id="2-5捕获摄像头画面"><a href="#2-5捕获摄像头画面" class="headerlink" title="2.5捕获摄像头画面"></a>2.5捕获摄像头画面</h2><p>下面调用图像和摄像头，这是较为完整严谨的写法</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> cv2<span class="token comment" spellcheck="true"># 读入本地图像文件</span>img <span class="token operator">=</span> cv2<span class="token punctuation">.</span>imread<span class="token punctuation">(</span><span class="token string">'no_exist.png'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 校验图像是否导入成功，如果导入失败，就输出提示</span><span class="token keyword">if</span> img <span class="token keyword">is</span> None<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"未能读入图像，请检查图像文件路径是否正确"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 在窗口中显示图像</span>cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">"Display window"</span><span class="token punctuation">,</span> img<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 获取键盘按键动作，如果按下s键，就将图像保存至本地</span>k <span class="token operator">=</span> cv2<span class="token punctuation">.</span>waitKey<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 0表示永久等待键盘按键，15表示等待15毫秒</span><span class="token keyword">if</span> k <span class="token operator">==</span> ord<span class="token punctuation">(</span><span class="token string">"s"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    cv2<span class="token punctuation">.</span>imwrite<span class="token punctuation">(</span><span class="token string">"saved_img.png"</span><span class="token punctuation">,</span> img<span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>destroyAllWindows<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>在实际场景中，如果图片路径没有写对，那么会报出错误，所以我们要对其进行一个人性化的处理</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> cv2<span class="token comment" spellcheck="true"># 捕获摄像头，传入摄像头索引号，默认摄像头索引为0</span>cap <span class="token operator">=</span> cv2<span class="token punctuation">.</span>VideoCapture<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 校验摄像头是否捕获成功，如果未成功则输出提示</span><span class="token keyword">if</span> <span class="token operator">not</span> cap<span class="token punctuation">.</span>isOpened<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"无法打开摄像头"</span><span class="token punctuation">)</span>    exit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 无限循环，直到触发break跳出</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 获取摄像头捕获的画面帧，返回ret和frame</span>    <span class="token comment" spellcheck="true"># ret的True/False反映是否捕获成功，frame是画面</span>    ret<span class="token punctuation">,</span> frame <span class="token operator">=</span> cap<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 校验画面帧是否正确捕获，如果未成功则输出提示，跳出循环</span>    <span class="token keyword">if</span> <span class="token operator">not</span> ret<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"无法获取画面帧"</span><span class="token punctuation">)</span>        <span class="token keyword">break</span>    <span class="token comment" spellcheck="true"># 对画面帧进行处理</span>    <span class="token comment" spellcheck="true"># 这里是将画面转为灰度图</span>    gray <span class="token operator">=</span> cv2<span class="token punctuation">.</span>cvtColor<span class="token punctuation">(</span>frame<span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>COLOR_BGR2GRAY<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 在窗口中显示处理之后的画面</span>    cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">'frame_window'</span><span class="token punctuation">,</span> gray<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 获取键盘按键动作，如果按下q键，就跳出循环</span>    <span class="token keyword">if</span> cv2<span class="token punctuation">.</span>waitKey<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> ord<span class="token punctuation">(</span><span class="token string">'q'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">break</span><span class="token comment" spellcheck="true"># 关闭摄像头</span>cap<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 关闭所有窗口</span>cv2<span class="token punctuation">.</span>destroyAllWindows<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>这里将视频内容进行了一个灰度化处理</p><h2 id="2-6打开视频"><a href="#2-6打开视频" class="headerlink" title="2.6打开视频"></a>2.6打开视频</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> cv2<span class="token comment" spellcheck="true">#打开一个视频,并且逐帧播放</span>capture <span class="token operator">=</span> cv2<span class="token punctuation">.</span>VideoCapture<span class="token punctuation">(</span><span class="token string">'000.mp4'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#判断摄像头或视频是否读取，成功返回Ture</span><span class="token keyword">while</span><span class="token punctuation">(</span>capture<span class="token punctuation">.</span>isOpened<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    temp <span class="token operator">=</span> capture<span class="token punctuation">.</span>get<span class="token punctuation">(</span>cv2<span class="token punctuation">.</span>CAP_PROP_FRAME_COUNT<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#获取视频总帧数</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">:</span>        ret<span class="token punctuation">,</span> frame <span class="token operator">=</span> capture<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token operator">not</span> ret<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"无法获取画面"</span><span class="token punctuation">)</span>            <span class="token keyword">break</span>        gray <span class="token operator">=</span> cv2<span class="token punctuation">.</span>cvtColor<span class="token punctuation">(</span>frame<span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>COLOR_BGR2GRAY<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#转化为灰度图的形式</span>        cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">'frame'</span><span class="token punctuation">,</span> gray<span class="token punctuation">)</span>        temp <span class="token operator">=</span> temp <span class="token operator">-</span> <span class="token number">1</span> <span class="token comment" spellcheck="true">#播放一次帧数减一</span>        <span class="token keyword">if</span> cv2<span class="token punctuation">.</span>waitKey<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token operator">==</span> ord<span class="token punctuation">(</span><span class="token string">'q'</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true">#30表示暂停时间，越小越快</span>            <span class="token keyword">break</span>    <span class="token keyword">break</span></code></pre><h2 id="2-7录制视频保存"><a href="#2-7录制视频保存" class="headerlink" title="2.7录制视频保存"></a>2.7录制视频保存</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> cv2capture <span class="token operator">=</span> cv2<span class="token punctuation">.</span>VideoCapture<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>outfile <span class="token operator">=</span> cv2<span class="token punctuation">.</span>VideoWriter<span class="token punctuation">(</span><span class="token string">'output.avi'</span><span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>VideoWriter_fourcc<span class="token punctuation">(</span><span class="token operator">*</span><span class="token string">'MJPG'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">25.0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">640</span><span class="token punctuation">,</span> <span class="token number">480</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#第一个参数表示视屏录制之后的位置，第二个参数是指编码格式如mjpg格式   cv2.VideoWriter_fourcc(*'MJPG')   第三个是帧率，第四个帧大小，第五个是否彩色</span>capture<span class="token punctuation">.</span>open<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">while</span><span class="token punctuation">(</span>capture<span class="token punctuation">.</span>isOpened<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    ret<span class="token punctuation">,</span>frame <span class="token operator">=</span> capture<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#ret调用成功或失败，frame获取到的画面是一个numpy数组</span>    outfile<span class="token punctuation">.</span>write<span class="token punctuation">(</span>frame<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#写入文件</span>    cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">'frame'</span><span class="token punctuation">,</span>frame<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#展示摄像头所捕获的画面，第一个参数是窗口名</span>    key_<span class="token operator">=</span>cv2<span class="token punctuation">.</span>waitKey<span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#每60ms获取按键键值</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>key_<span class="token punctuation">)</span>    <span class="token keyword">if</span> key_ <span class="token operator">==</span> <span class="token number">27</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true">#这里27是Esc对应的键值</span>        <span class="token keyword">break</span>capture<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#关闭摄像头</span>cv2<span class="token punctuation">.</span>destroyAllWindows<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#关闭窗口</span></code></pre><h1 id="3-1Yolo-v1技术概要"><a href="#3-1Yolo-v1技术概要" class="headerlink" title="3.1Yolo v1技术概要"></a>3.1Yolo v1技术概要</h1><p>目前YoLo已经更新到v5版本，而想要读懂YoLo我们需要从最基础的v1来看</p><p>YoLo是把目标检测作为回归问题去解决的</p><p>传统的模型需要先提取候选框，对每一个候选框逐一的甄别进行分类和回归</p><p>以RCNN为例先提取出两千个候选框在逐一的对每个候选框进行甄别，非常的耗时费力</p><p>而YoLo不一样，它是单阶段的，只需要看一次，直接将图片送入网络就可以得出结果</p><p>通过阅读YoLo的论文我们可以知道，YoLo是将一张图片分成一个s*s的网格，如论文上那个狗和自行车的例子，它分成了七乘七的网格，每一个网格又能预测出B个bounding box，如果在训练过程中一个标签落到了哪一个网格，那就由那个网格产生的bounding box去预测这个物体，而究竟是用这B个bounding box中的哪一个去预测呢？就是由这B个bounding box中IOU最大重合度最大的框去负责预测，网络就会产生这么一个结构7×7×（5×B+C），就是每个网格都会产生两个bounding box，每个bounding box都有五个参数分别是（x,y,h,w,c）框线粗细表示C的大小，每一个格子又会产生类别的概率，对得到的值进行后处理，比如非极大值抑制，就能的到我们最终的目标检测结果了，这就是YoLo的整个过程</p><p>论文中展示的过程是正向推断过程，而哪一个框预负责预测某个物体是训练的过程，训练过程是监督学习，有人工标注的矩形框的中点落在哪个格子里，就由哪个格子产生的bounding box去预测这个物体</p><p>YoLo v1的网络结构是一个全卷积网络，全部是由卷积神经网络构成的，中间交替使用了1×1和3×3卷积，总共有24层卷积提取图像特征，再由两个全连接层回归得到一个7×7×30的tensor，7×7意味图像分割成7×7的网格，30表示每一个各自产生两个bounding box，而每一个bounding box有五个元素，每一个格子预测二十个类别就是10+20=30</p><p>由于YoLo是关注图片的全部信息的，而Fast R-CNN只能看到RoI区分背景能力差，经过对比我们可以知道，区分背景和物体的能力强，但精确定位较差，而且YoLo的泛化性特别强，哪怕是在自然界中训练好的模型也能用于艺术品</p><h1 id="3-2YoLo-v5示例"><a href="#3-2YoLo-v5示例" class="headerlink" title="3.2YoLo v5示例"></a>3.2YoLo v5示例</h1><p>进入<a href="github.com/ultralytics/yolov5">YoLo v5</a>的github页面</p><p>将目标下载</p><p>找到下载目录并进入</p><p>使用Win+R打开命令行，cd到对应目录</p><p>运行如下命令</p><pre><code>python detect.py --source 0 --weights weights/yolov5s.pt</code></pre><p>如若报错，根据内容安装对应支持包即可</p><p>如：</p><pre><code>pip install tqdm</code></pre><p>torch包下载不下来可以访问<a href="https://pytorch.org/get-started/locally/#start-locally">官网</a>选择对应的版本系统下载即可</p><p><img src="0.png"></p><p>想要关闭可以按q键退出，注意要将输入法调成英文，检测速度速度由个人电脑配置决定</p><p>这里我们来看一下它的源码的这个地方：</p><p><img src="1.png"></p><p>介绍一下部分参数的作用：</p><p>–weights    权重，可以使用默认权重文件和自己训练好的权重文件</p><p>–source    视频来源</p><p>–output    预测结果存放地址</p><p>–img-size    图片大小</p><p>–conf-thres    目标执行度阈值</p><p>–iou-thres    区域交并比：重叠区域和并集区域的比值</p><p>–device    使用CPU or GPU</p><p>–classes    类别</p><p>下面我们来尝试使用一个视频来做一个演示</p><p>命令如下：</p><pre><code>python detect.py --source 相对路径/文件名.mp4 --weights weights/yolov5s.pt --output 相对路径/文件名.mp4</code></pre><p>这里我们可以看到我们视频已处理帧数和总帧数，并且还有处理每一帧所耗费的时间</p><p><img src="2.png"></p><p>这里我是用CPU去跑的，所以速度很慢，如果想中途中断可以使用Ctrl+C中断，中断之后已处理的图像也会被保存下来，不过会有一些问题</p><h1 id="3-3使用YoLo-v5训练自己的训练集"><a href="#3-3使用YoLo-v5训练自己的训练集" class="headerlink" title="3.3使用YoLo v5训练自己的训练集"></a>3.3使用YoLo v5训练自己的训练集</h1><p>建立自己的数据集，这里举一个简单的栗子</p><p>标注软件建议使用Labelimg</p><p>操作说明，a上一张图，d下一张图，w化框格，可以用鼠标来调整，选择Yolo格式输出</p><p>标签文件：</p><p>第一列类别</p><p>第二列左上角坐标</p><p>第三列框住部分占总图片的比例</p><p>第四列宽度</p><p>第五列高度</p><p>以上都是归一化的值</p><p>每一个TXT都是一个图片上所有框的信息</p><hr><p>图片分为三个文件夹</p><p>训练集：用于模型拟合的数据样本</p><p>验证集：是模型训练过程中单独留出的样本集，它可以用于调整模型的超参数和用于对模型的能力进行初步评估</p><p>测试集：用来评估模最终模型的泛化能力。但不能作为调参、选择特征等算法相关的选择的依据</p><p>比喻一下就是</p><p><strong>训练集</strong>————学生的课本，学生 根据课本里的内容来掌握知识。</p><p><strong>验证集</strong>————作业，通过作业可以知道 不同学生学习情况、进步的速度快慢。</p><p><strong>测试集</strong>———–考试，考的题是平常都没有见过，考察学生举一反三的能力。</p><p>训练使用train.py，同时指定部分参数，data.yaml文件：里面有训练集和验证集图像的位置，类别数量和类别名；模型.yaml文件：需要根据不同训练x、s、m、l文件分别做修改，修改nc类别数，anchors可以使用聚类的方法去修改，当然这里并不建议自己修改</p><p>yaml文件可以使用Notepad++就可以打开和修改，当然也可以使用自带文本编辑器，不过这里不建议使用自带文本编辑器</p><p>总之，嫌麻烦的可以使用别人的训练集</p><p>官网上有相关教程，这里就不做更多介绍了</p><h1 id="4-1关键点检测"><a href="#4-1关键点检测" class="headerlink" title="4.1关键点检测"></a>4.1关键点检测</h1><p>关键点检测多用于检测摔倒、体育动作指导、肢体语言理解、步态身份识别、动作捕捉、动作控制、3D试衣等等场景</p><p>下面只聊一聊简单的关键点检测算法</p><p>人体关键点检测是个回归问题，这个和之前的YoLo有些相似，不过我们人体关键点检测有些限制，比如说一般人是不可能出现两个头啊六条腿之类的</p><p>关键点检测其实和目标追踪有些想像</p><p>这里顺便介绍一下计算机视觉的部分知识</p><p>卷积操作就是将卷积核在元组上滑动并且分别点乘，就会得到卷积后的元组</p><p>多通道的卷积操作就是用多通道的卷积核进行操作</p><p>池化是把大的元组变成小的元组，可以取最大值和平均值分为最大池化和平均池化，池化可以融合汇总特征，防止过拟合，引入平移不变性起到模糊的效果，卷积神经网络就是将卷积层与池化层交替进行最后加上全连接层和输出层构件的既可以二分类也可以多分类</p><p>目标检测方法包括两种</p><p>单阶段方法，速度快准确率低，代表：YoLo、SSD及其变种</p><p>两阶段方法，速度慢需要找出候选框，再在候选框上进行目标检测回归，准确率高，代表：SPP-Net、R-CNN、Fast-R-CNN、Faster-R-CNN及其变种</p><p>单阶段已经介绍过了，两阶段以R-CNN为例，现在目标图片上选出两千个左右的候选框，这两千多个候选框用的是选择性搜索方法，缩放成同样的大小，在分别送入神经网络中进行分类和回归，分类SVMs，回归Bbox reg；这样的速度很慢</p><p><img src="4.png"></p><p>演变过程：</p><p><img src="3.png"></p><p>说回正题</p><p>人体姿态估计技术：提取图像中人体的关节关键点、脸部关键点、手势关键点，构建骨架，识别姿态</p><p>难点：多人、姿态复杂、视频分析、三维重构</p><p>传统的人体姿态估计需要人工构造特征，采用”基于模型“的方法</p><p>深度学习大规模应用后，采用端到端的表示学习，通过数据驱动的方法自动化构建特征</p><p>分为从上倒下：先挑出人，再检测</p><p>从低而上：先把所有关节找出来，在通过一定的准则来区分不同的人</p><p>人体姿态估计的经典解决方案</p><p>卡耐基梅隆大学的<a href="https://arxiv.org/pdf/1812.08008.pdf">OpenPose</a></p><p><a href="https://github.com/CMU-Perceptual-Computing-Lab/openpose">Github源码</a></p><p><a href="https://www.jianshu.com/p/3aa810b35a5d">中文翻译</a></p><hr><p><a href="https://arxiv.org/abs/1511.06645">DeepCut</a></p><p><a href="https://arxiv.org/abs/1612.00137">RMPE</a></p><p><a href="https://arxiv.org/abs/1703.06870">Mask RCNN</a></p><p>暂时先更新到这里，后续再继续补充<del>（由于电脑配置较低实在是有些捉襟见肘）</del></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Opencv </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Opencv </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>模糊PID二</title>
      <link href="/blog/2020/03/29/pid-1/"/>
      <url>/blog/2020/03/29/pid-1/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>上回我们简略的了解了一下模糊PID与普通PID的一些区别，这会我们来更进一步的了解其在工业领域的应用中会有什么样的表现</p><h1 id="1-控制机械臂"><a href="#1-控制机械臂" class="headerlink" title="1.控制机械臂"></a>1.控制机械臂</h1><p>这里我们来了解一下PID在机械臂控制方面的应用</p><p>在实际应用中，我们的机械臂往往会需要拿起一些重物，而当我们调好空载的PID的时候，我们拿起重物就会发现机械臂并不能很好的打到我们预期的地点，往往会伴随着误差，或者响应缓慢，而当我们调试好负载PID的时候又会出现空载机械臂响应出问题，并且，如果我们每次拿的重物不同我们就要重调PID，那么不是很麻烦么？</p><p>所以这种时候，我们可以试试我们的模糊PID</p><p>我们可以将传递函数的分子调大调小来模拟现实生活中不同机械臂的响应</p><p>我们将分子缩小十倍：</p><p><img src="4.png"></p><p>这里我们可以看见系统变得不稳定了，两种PID的超调量都开始增加，甚至出现了抖动，让我们进一步缩小分子：</p><p><img src="5.png"></p><p>可以看到，传统PID在500s内不能很好的追上期望，而我们的模糊PID虽然稳定下来时并不能很好的锁定在期望值上，但是可以看见模糊PID还是能很快的逼近期望值</p><p>好了，下面我们来增大分母，增大个十倍：</p><p><img src="6.png"></p><p>可以明显的看出来，系统变得稳定了，两种PID的输出都变得十分稳定，这时候，我们在增大分子也没有太大的作用了</p><p>至此上面一个示例再一次证明了模糊PID在应对不同情况下的输入都有良好的响应</p><hr><p>假设我们有一个n轴的机械臂，几轴无所谓，我们只关心其中一个轴的运动就可以了，我们只观察PID在这一个轴中的应用，这里我们打开上次的simulink系统，试着去改一下我们的输入，让它更符合我们实际生活中的控制方式，对于一个机械臂，如果我们只朝着一个方向动就会有使用风险，比如卡死烧坏电机，不能很好的调速等等</p><p>所以我们需要改变控制方式，就以我目前新做的这个系统举例：</p><p><img src="0.png"></p><p>模糊PID和PID的参数并未做修改，只是将期望变成一个随时变化的数：</p><p><img src="1.png"></p><p>上图我们可以看到，这样的控制方式已经很符合机械臂单轴的运作方式了，接下来，让我们将其输入系统中</p><p>得到下面两幅图：</p><p><img src="2.png"></p><p><img src="3.png"></p><p>上面两幅图可以清晰直观的看到，当输入量不断变化的时候，传统PID并不能很好的跟跟随上期望的变化，而且效果十分的差，即使再怎么调试参数，传统PID的响应都不可能迅速的跟上变化的期望，即使我每一个期望值都给了10s，传统PID也不能在10s内达到所期望的数值</p><p>而反观模糊PID，我们可以看到，虽然有些瑕疵，但模糊PID总是能在规定时间内达到期望值，虽然变化曲线有些不美观，达到预期的时间也较长，不过这些都可以修改模糊规则表来达到我们预期的效果，不过这些都是后话了，正是因为大多数控制系统中输入参数并不是固定值，所以我们更需要模糊PID</p><p>这时我们在结合一下之前第一个示例，调大分子看看两种PID的响应状况：</p><p><img src="7.png"></p><p><img src="8.png"></p><p>调小分子看看两种PID的响应状况：</p><p><img src="9.png"></p><p><img src="10.png"></p><p>我们可以看见，无论是如何调整分子，模糊PID却不会有较大的变化，而传统PID却有些许波动</p><p>本次模糊PID仿真到此结束，喜欢的请收藏本站</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> PID </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模糊PID </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>模糊PID</title>
      <link href="/blog/2020/03/21/pid/"/>
      <url>/blog/2020/03/21/pid/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在讲解模糊PID之前，我们先来了解一下什么是PID</p><p>PID控制器作为一个比较古老的控制方式，但由于其经典稳定的发挥，在如今也有相当一部分的应用场景，同样也延伸出了相当多的一部分基于PID的改良版控制器</p><p>先从字面意思理解一下PID控制器：</p><ul><li>P就是比例，是输入偏差成算的系数</li><li>I就是积分，就是对输入偏差进行积分运算</li><li>D就是微分，对输入偏差进行微分运算</li></ul><p>这就是PID的简单含义，就是比例、积分和微分控制的简称，当然在实际工业场景中，也有PI控制和PD控制，PID系统是根据被控系统的输入与输出的比较误差，通过对误差的比例、积分、微分计算出控制量进行控制的</p><p>这里放一下传统PID控制器的图：</p><p><img src="0.png"></p><p>其公式可以总结为：</p><p><img src="1.png"></p><p>常用控制方式：</p><p><img src="2.png"></p><p>除此之外，PID控制器在大的方面可以分为位置式和增量式，以上两种控制方式这里就不多介绍了，两种控制方式在一定的条件下其实可以相互转化的</p><p>下面，就让我们来通过一个例子来了解PID的运作方式：</p><p><img src="3.png"></p><p>在上面这个simulink仿真中，我们选取了一个阶跃信号作为期望，反馈为我们的输出信号，对其进行求差，输入我们PID的输入，选取1.5作为P输入，将所求出结果输入传递函数之中，经由传递函数输出到示波器上来查看我们的PID输出波形曲线</p><p>传递函数：描述<a href="https://baike.baidu.com/item/%E7%BA%BF%E6%80%A7%E7%B3%BB%E7%BB%9F/6814705">线性系统</a>动态特性的基本<a href="https://baike.baidu.com/item/%E6%95%B0%E5%AD%A6%E5%B7%A5%E5%85%B7/903000">数学工具</a>之一，虽然有其部分局限性（不能完全的描述系统的真实状态）但在这里，我们只需要传递函数就够了，通俗的理解就是一个系统总结出来的模型，比如说一个控制电机的系统，我们可以通过对其输入和输出量进行拉氏变换或z变换，然后用输出量变换后的结果比上输入量变换的结果，最终就能得到我们的传递函数</p><p>现在我们来看一下我们的PID波形曲线：</p><p><img src="4.png"></p><p>可以看到的是，我们的PID曲线十分的震荡，要经过很久才能稳定下来，但有个好消息是，我们的PID中值始终落在期望1上，接下来我们调整一下D，让D=9.5</p><p><img src="5.png"></p><p>可以看到我们的PID曲线已经十分平稳，但是有一个问题，我们将Y轴放大一下</p><p><img src="6.png"></p><p>可以看到，最后平稳的曲线并没有真正的追上期望，所以在此我们调整一下I，I=0.001165</p><p><img src="7.png"></p><p>我们来放大看一下：</p><p><img src="8.png"></p><p>误差已经被缩小到零后六位，当然这是在模拟情况下的，如果在实际中并不用将误差缩到这么小</p><p>好了，至此我们来总结一下PID三个参数的效果：</p><p><img src="9.png"></p><p>这只是我们这个期望下的结果，让我们调大一下期望值：</p><p><img src="10.png"></p><p>可以看到初始超调值已经从之前的0.1到了现在的0.6，而我们的静态误差从零后六位降到了零后三位，让我们来继续调大一下期望值</p><p><img src="11.png"></p><p>这时初始超调值已经上升到个位数了，这还只是在一个模拟的系统之中，系统不存在干扰和误差，如果我们加入干扰和误差，那么就不会取得现在这样的效果了</p><p>PID控制的核心技术就是如何整定出PID控制器的三个最优参数，使得PID控制达到所期望的控制效果，另外需要解决的问题就是在面对复杂多变的非线性系统时，PID控制器如何能够实时在线整定控制器的三个特征参数，以适应动态变化的控制环境，这就是PID参数整定和自整定的问题，随着智能控制技术的发展和先进算法研究的深入，多种先进算法被应用于PID控制器，现有智能PID控制器的研究主要有专家系统型PID控制器、模糊PID控制器、神经网络PID控制器和基于遗传算法以及基于蚁群算法的PID控制器等等。PID控制器在实践中不断得到改进，这里我们就开始了解其中一种——模糊PID</p><p>下面我们就进入正题</p><h1 id="1-模糊PID的原理"><a href="#1-模糊PID的原理" class="headerlink" title="1.模糊PID的原理"></a>1.模糊PID的原理</h1><p>模糊PID控制，利用模糊逻辑并根据一定模糊规则对PID的参数进行实时的优化，以克服传统PID参数无法实时调整PID参数的缺点。模糊PID控制包括模糊化，确定模糊规则，解模糊等组成部分</p><p>以小车举例，如何让他能够按照预定轨道正确行驶呢？</p><p>先确定当前轨道距离预定轨道的偏差E以及当前偏差和上次偏差变化EC，根据模糊规则进行模糊推理，最后对模糊参数进行解模糊，输出相应的PID参数</p><p>老规矩先放个控制器的图：</p><p><img src="12.png"></p><h1 id="2-模糊化"><a href="#2-模糊化" class="headerlink" title="2.模糊化"></a>2.模糊化</h1><p>模糊控制的输入依然是我们熟悉的error(t)与error(t-1),步骤可分为模糊化、模糊推理、解模糊三个步骤，现在我们将从模糊化说起</p><p>模糊化是模糊算法非常重要的一步，首先确定对应各语言变量的模糊子集，然后根据量化的结果，我们就可以判断该输入所属的集合并计算出对应的隶属度。计算隶属度的方法有很多，最常用的是使用三角形隶属度函数或梯形隶属度函数等来计算获得</p><p>建立论域：</p><p>例如：{-6,-5,-4,-3,-2,-1,0,1,2,3,4,5,6}</p><p>将所的变量量化一下：</p><p><img src="13.png"></p><p>确定隶属度函数，这里取三角隶属度函数，例如这样：</p><p><img src="14.png"></p><h1 id="2-模糊规则"><a href="#2-模糊规则" class="headerlink" title="2.模糊规则"></a>2.模糊规则</h1><p>根据采集回来的E和EC我们可以推理出他们各自所占据的隶属度，此时我们可以根据模糊规则表去找出输出值所对应的隶属度，这里放个模糊规则表的图：</p><p><img src="15.png"></p><p>这个表我们可以自己定制，表中的词也可以自行替换，其中U带入PID三个变量即可获得其对应的模糊规则表</p><p>当然在实际应用中，PID三个表的其中对应规则需要做不同的修改，这里就简单的提一下：</p><ul><li>Kp模糊规则：依据PID的调试经验我们可以知道，在PID控制器中，Kp值的选取决定于系统的响应速度。增大Kp能提高响应速度，减小稳态偏差；但是，Kp值过大会产生较大的超调，甚至使系统不稳定减小Kp可以减小超调，提高稳定性，但Kp过小会减慢响应速度，延长调节时间。因此，调节初期应适当取较大的Kp值以提高响应速度，而在调节中期，Kp则取较小值，以使系统具有较小的超调并保证一定的响应速度；而在调节过程后期再将Kp值调到较大值来减小静差，提高控制精度，我们对上面那张模糊规则表不用做过多的修改，只需要将PB整体左上移动一个单位，NB同理右下一个单位，空余部分用PM，PS和NM，NS填充</li><li>Ki模糊规则：在系统控制中，积分控制主要是用来消除系统的稳态偏差。由于某些原因(如饱和非线性等)，积分过程有可能在调节过程的初期产生积分饱和，从而引起调节过程的较大超调。因此，在调节过程的初期，为防止积分饱和，其积分作用应当弱一些，甚至可以取零；而在调节中期，为了避免影响稳定性，其积分作用应该比较适中；最后在过程的后期，则应增强积分作用，以减小调节静差，我们只需要将模糊规则表关于ZO做一个镜像翻转，将其中内容填入即可，例左上第一个，与右下第一个互换</li><li>Kd模糊规则：微分环节的调整主要是针对大惯性过程引入的，微分环节系数的作用在于改变系统的动态特性。系统的微分环节系数能反映信号变化的趋势，并能在偏差信号变化太大之前，在系统中引入一个有效的早期修正信号，从而加快响应速度，减少调整时间，消除振荡．最终改变系统的动态性能。因此，Kd值的选取对调节动态特性影响很大。Kd值过大，调节过程制动就会超前，致使调节时间过长；Kd值过小，调节过程制动就会落后，从而导致超调增加。根据实际过程经验，在调节初期，应加大微分作用，这样可得到较小甚至避免超调；而在中期，由于调节特性对Kd值的变化比较敏感，因此，Kd值应适当小一些并应保持固定不变；然后在调节后期，Kd值应减小，以减小被控过程的制动作用，进而补偿在调节过程初期由于Kd值较大所造成的调节过程的时间延长，Kd的模糊规则表调整起来不是很容易，所以可以根据自身系统进行微调即可</li></ul><h1 id="3-解模糊化"><a href="#3-解模糊化" class="headerlink" title="3.解模糊化"></a>3.解模糊化</h1><p>就以上述模糊规则表来解释</p><p>当E正好落在PM上，EC正好落在NB上之后，那么我们解模糊化输出的便是ZO</p><p>但一般情况下是EC落在NB-NM之间，E落在PM-PB之间，那么我们不妨假设EC属于NB的隶属度为a（a&lt;1）那么，EC属于NM的隶属度就是1-a，同理可得，E属于PM的隶属度为b（b&lt;1），属于PB的隶属度为1-b</p><p>那么NB与PM所对应的ZO隶属度就为a*b，其余三个分别为：</p><ul><li>NB-PB——ZO为a*(1-b)</li><li>NM-PM——ZO为b*(1-b)</li><li>NM-PB——NS为(1-a)*(1-b)</li></ul><p>总得隶属度加起来刚好是1</p><p>这里我们使用如下公式便可算出：</p><p><img src="16.png"></p><p>其中M为隶属度，F为模糊化值</p><p>当然，如果我们使用的是量化值，我们还需要将其转化为实际值，这里我们用如下公式来算：</p><p><img src="17.png"></p><p>其中∆K为我们所计算得到的值，而α为系数， 通过该公式可分别求出KP，KI，KD</p><h1 id="4-仿真"><a href="#4-仿真" class="headerlink" title="4.仿真"></a>4.仿真</h1><ul><li>第一步，打开matlab输入fuzzy</li><li><img src="18.png"></li><li>在上面那个弹出窗口里点开Edit-Rules，输入四乘四简化版模糊规则</li><li><img src="26.png"></li><li>打开Edit，选择Add Variable…添加输入输出变量</li><li><img src="19.png"></li><li>双击e修改其值Range与Params，这里改成你设定的论域，同理也修改ec、kp、ki、kd</li><li><img src="20.png"></li><li>这里我只建立了简化版的模糊规则，并没有细分</li><li>建立完成确认无误后，点击File-Export-to workspace..</li><li>将这个导入工作区之后，建立simulink模型</li><li><img src="21.png"></li><li>其中调整图中蓝色部分，改为自己fuzzy文件的名字</li><li><img src="22.png"></li><li>运行查看结果：</li><li><img src="23.png"></li><li>图中蓝线为模糊PID的值，黄线为普通PID的值，当然这里模糊PID的值已经是我调试过的，调试方法大致与普通PID有相似之处，不过我并不建议大伙像我一样经验调参，最好是有合理的计算和分析步骤</li><li>现在我们来改变一下阶跃信号的值，也就是我们的期望</li><li><img src="24.png"></li><li>虽然当期望是一的时候我们的超调现象十分明显，但当期望变为100的时候，曲线已经很平稳了，而且无论是期望1还是期望100，模糊PID的响应都要优于普通PID</li><li>当然除此之外，我们还可以通过一些别的方式来看我们所写的模糊PID</li><li>打开View-Rules，在这个图中我们可以通过拖动左边两条红色的细线来查看不同的输出结果，以此达到直观的了解</li><li><img src="25.png"></li><li>打开View-Surface，我们可以得到一个基本曲面图</li><li><img src="27.png"></li></ul><p>至此，本次仿真结束，喜欢的话可以收藏本站</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> PID </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模糊PID </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ECC加密算法</title>
      <link href="/blog/2020/03/02/ecc/"/>
      <url>/blog/2020/03/02/ecc/</url>
      
        <content type="html"><![CDATA[<h1 id="原理介绍"><a href="#原理介绍" class="headerlink" title="原理介绍"></a>原理介绍</h1><p>在ECC中，利用特殊形式的椭圆曲线，其方程如下：</p><p><img src="0.png"></p><p>其中：</p><p><img src="1.png"></p><p>这个是用来排除单数曲线所必须的，其中<em>a</em>和<em>b</em>决定了曲线在坐标系的不同形状。</p><p>在开始之前我们需要引入一个定义——Abel（阿贝尔群）：</p><p>数学上是指定义了二元操作运算并且使用“+”表示的一个集合。必须满足以下要求：</p><p>1、封闭性（closure）：如果<em>a</em>和<em>b</em>都是群成员，那么<em>a</em> + <em>b</em>也应该是群成员。</p><p>2、组合性（associativity）：*(a+b)+c=a+(b+c)*</p><p>3、单位元：0值就是单位元。</p><p>4、逆元：<em>a</em>的逆元就是-<em>a</em>。</p><p>当然阿贝尔群除了上面的性质外还满足交换律公理a<em>b=b</em>a。</p><p>同样在椭圆曲线也可以定义阿贝尔群：</p><p>1、设<em>O</em>为单位元，对曲线上所有的点<em>P</em>都满足P+O=P。</p><p>2、对点<em>P</em>（<em>x</em>，<em>y</em>）有点<em>Q</em>（<em>x</em>，-<em>y</em>）满足<em>P+Q=O</em>，则称点<em>Q</em>为<em>P</em>的逆元，记为-<em>P</em>，在此基础上我们可以定义减法规则：<em>P-Q=P+(-Q)</em> 。</p><p>3、异点相加：对不同且不互逆的点<em>P</em>（<em>x</em>，<em>y</em>）与<em>Q</em>（<em>a</em>，<em>b</em>），即<em>x</em>≠<em>a</em>，Ep（<em>a</em>，<em>b</em>）则：<em>P(x , y)+Q(c , d)=S(i , j)</em></p><p>其中：</p><p><img src="2.png"></p><p>4、倍点原则：对于一个点<em>P</em>（<em>x</em>，<em>y</em>），若<em>P</em>≠-<em>P</em>，即<em>y</em>≠0，Ep（<em>a</em>，<em>b</em>）则有：</p><p><em>P(x,y)+P(x,y)=2P(x,y)=S(i.j)</em></p><p>其中：</p><p><img src="3.png"></p><p>并不是所有的点都可以求倍点，同样也不是所有的点都可以用来建立椭圆曲线系统，所以就引入了有限域椭圆曲线点的阶。</p><p>设<em>P</em>是椭圆Ep（<em>a</em>，<em>b</em>）上的点，若存在最小的正整数<em>n</em>使得：<em>nP=O</em>（O是无穷远的点）则称<em>n</em>为<em>P</em>的阶，若<em>n</em>不存在，则称<em>P</em>是无限阶的。</p><p>若一个群<em>G</em>的每一个元都是<em>G</em>的某一个固定元<em>a</em>的乘方，则称<em>G</em>为循环群记为：</p><p><img src="4.png"></p><p><em>a</em>称为<em>G</em>的一个生成元。</p><p>在某些条件下，椭圆曲线上所有的点构成一个循环群，并且一定存在一个本原元，它的幂值生成了整个群（这就是离散对数问题）。</p><p>给定一个椭圆曲线E，确定本原元<em>P</em>和一个元素<em>T</em>，那么离散对数问题就是找到整数<em>D</em>，满足：<em>P+P+P+….+P=DP=T</em></p><p>在密码体制中，D通常为整数，也是私钥，曲线上的点T是公钥。</p><p>至此，椭圆曲线的原理基本以阐述完毕，总结如下：</p><p>椭圆曲线Ep（<em>a</em>，<em>b</em>）上的点<em>G</em>，<em>n</em>为<em>G</em>的阶*(nG=O∞)<em>，</em>d<em>为小于</em>n<em>的整数。考虑方程：</em>P=dG*</p><p>其中<em>P,G</em>属于<em>E</em>，<em>d</em>为整数。</p><p>由<em>d</em>，<em>G</em>计算<em>P</em>很容易，而有<em>P</em>,<em>G</em>求<em>d</em>计算上是不可行的。</p><p>这就是椭圆曲线密码体制安全的基础，又叫做椭圆曲线的离散对数问题。</p><p>其中点<em>G</em>为基点，<em>d</em>（<em>d</em>&lt;<em>n</em>）为私有密钥，<em>P</em>为公开密钥。</p><h1 id="程序设计"><a href="#程序设计" class="headerlink" title="程序设计"></a>程序设计</h1><p>取一素数<em>p</em>，两个参数<em>a</em>，<em>b</em>，得到Ep（<em>a</em>，<em>b</em>）。</p><p>利用公式验证所得曲线为可用曲线，判断公式：</p><p><img src="1.png"></p><p>画出椭圆曲线的图，得知隐函数的情况下调用ezplot画出椭圆曲线的图。</p><p>画出曲线的散点图，计算方法与公式如下：</p><p>计算<em>x</em>=0至*x=(p-1)*中，计算：</p><p><img src="5.png"></p><p>其中若能求的整数平方根的数则为有效点，同时计算出:</p><p><img src="6.png"></p><p><img src="7.png"></p><p>取基点<em>G</em>，由<em>G</em>计算出曲线的阶<em>n</em>，计算公式为：*(n-1)G=-G*</p><p>写出-<em>G</em>的计算公式：*-G(x ,z)=G(x ,-1y)mod p = G(x ,p-y)*</p><p>选取私有密钥<em>key</em>（<em>key</em>&lt;<em>n</em>），计算公开密钥<em>K=keyG</em></p><p>有了上述内容，可以着手设计加密解密步骤了。</p><p>加密步骤：输入一个随机数<em>r</em>（<em>r</em>&lt;<em>n</em>）作为加密方的私钥，利用输入的随机数生成点:</p><p><img src="8.png"></p><p> G_r为加密方的公钥，用到的公式如下：</p><p><img src="9.png"></p><p>K_r为共享密钥，计算公示如下：</p><p><img src="10.png"></p><p>将明文转化为密文，利用K_r的x轴坐标作为加密密钥，公式如下：</p><p><img src="11.png"></p><p>解密步骤：利用加密方传回的密文<em>C</em>和G_r求解<em>M</em>，在知道  和己方私钥的情况下求解<em>M</em>是十分容易的，先解出共享密钥K_r，利用其x轴坐标用简单的公式：</p><p><img src="12.png"></p><p>最终得到想要的明文<em>M</em>。</p><p>思维导图如下：</p><p><img src="13.png"></p><h1 id="运行结果演示"><a href="#运行结果演示" class="headerlink" title="运行结果演示"></a>运行结果演示</h1><p>代码见附录，这里只演示。</p><p>请输入a的值：10</p><p>请输入b的值：5</p><p>请输入p的值：23</p><p>请确曲线：1确认，0退出</p><p>1</p><p><img src="14.png"></p><p>椭圆曲线的散列图为：</p><p>22 - - - - - - - - - - 1 - - - - - - - - - - - - </p><p>21 - - - - - - - 1 - - - - - - - - - - - - - - - </p><p>20 - - - - - - - - - - - - - 1 - - - - - - - - - </p><p>19 - 1 - 1 - - - - - - - - - - - - - - - 1 - - - </p><p>18 - - - - - - - - - - - - - - - - - - - - - - - </p><p>17 - - - - - - - - - - - - 1 - - - - - - - - - - </p><p>16 - - - - - - - - - - - - - - - - - - - - - - - </p><p>15 - - - - - - - - - - - - - - - - - - - - - - - </p><p>14 - - - - - - - - - - - - - - - - - - - - - - - </p><p>13 - - - - - - - - - - - - - - - - - - - - - - - </p><p>12 - - - - - - - - - - - - - - - - 1 - - - - - - </p><p>11 - - - - - - - - - - - - - - - - 1 - - - - - - </p><p>10 - - - - - - - - - - - -  - - - - - - - - - - - </p><p>9 - - - - - - - - - - - - - - - - - - - - - - - </p><p>8 - - - - - - - - - - - - - - - - - - - - - - - </p><p>7 - - - - - - - - - - - - - - - - - - - - - - - </p><p>6  - - - - - - - - - - - - 1 - - - - - - - - - - </p><p>5 - - - - - - - - - - - - - - - - - - - - - - - </p><p>4 - 1 - 1 - - - - - - - - - - - - - - - 1 - - - </p><p>3 - - - - - - - - - - - - - 1 - - - - - - - - - </p><p>2 - - - - - - - 1 - - - - - - - - - - - - - - - </p><p>1 - - - - - - - - - - 1 - - - - - - - - - - - - </p><p>0 - - - - - - - - - - - - - - - - - - - - - 1 - </p><p>0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22</p><p>1：在如上坐标系中选一个值为G的坐标</p><p>1：请输入选取的x坐标值：10</p><p>1：请输入选取的y坐标值：1</p><p>1：请输入私钥小key（&lt;9）：8</p><p>2：请输入一个整数k（&lt;9）用于求kG和kQ：7</p><p>2：请输入需要加密的字符串:ECC加密算法</p><p>密文为：(16,11),1104-(16,11),1072-(16,11),1072-(16,11),338432-(16,11),375904-(16,11),506224-(16,11),445776-</p><p>1解密得到明文：ECC加密算法</p><p>结束</p><h1 id="ECC加密算法的优点"><a href="#ECC加密算法的优点" class="headerlink" title="ECC加密算法的优点"></a>ECC加密算法的优点</h1><p>1、安全性高：攻击有限域上的离散对数问题可以使用指数积分法，其运算的复杂度</p><p><img src="15.png"></p><p>其中<em>p</em>是模数（为素数）。而它对于椭圆曲线上的离散对数问题并不有效。目前攻击椭圆曲线上离散对数问题的方法只有适合攻击任何循环群上离散对数问题的大步小步法，其运算复杂度为：</p><p><img src="16.png"></p><p>其中<em>P_max</em>是椭圆曲线所形成的Abel群的阶的最大因子。因此，椭圆曲线密码体制比基于有限域上的离散对数问题的公钥体制更加安全</p><p>2、密钥量小：由攻击两者的算法复杂度可知，在实现相同的安全性能条件下，椭圆曲线密码体制所需的密钥量远比基于有限域上的离散对数问题的公钥体制的密钥量小</p><p>3、灵活性好：有限域GF(q)一定情况下，其上的循环群(即GF(q)-{0})就定了。而GF(q)上的椭圆曲线可以通过改变曲线参数，得到不同的曲线，形成不同的循环群。因此，椭圆曲线具有丰富的群结构和多选择性。</p><p>正是由于椭圆曲线具有丰富的群结构和多种选择性，并可在保持和RSA/DSA体制同样安全性能的前提下，大大缩短了密钥长度(目前160比特足以保证安全性)，因而在密码领域有着广阔的引用前景。下表给出了椭圆曲线密码体制和RSA/DSA体制在保持同等安全的条件下各自所需的密钥长度。</p><p><img src="17.png"></p><h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><pre class=" language-python"><code class="language-python"><span class="token number">1</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">#-*- codeing = utf-8 -*-  </span><span class="token number">2</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">#@Time : 2020/2/24 11:46  </span><span class="token number">3</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">#@Author : Friats  </span><span class="token number">4</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">#@File : ECC.py  </span><span class="token number">5</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">#@Software : PyCharm  </span><span class="token number">6</span><span class="token punctuation">.</span>    <span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> mp  <span class="token number">7</span><span class="token punctuation">.</span>    <span class="token keyword">from</span> sympy<span class="token punctuation">.</span>parsing<span class="token punctuation">.</span>sympy_parser <span class="token keyword">import</span> parse_expr  <span class="token number">8</span><span class="token punctuation">.</span>    <span class="token keyword">from</span> sympy <span class="token keyword">import</span> plot_implicit  <span class="token number">9</span><span class="token punctuation">.</span>      <span class="token number">10</span><span class="token punctuation">.</span>    <span class="token triple-quoted-string string">""" 11.    变量定义如下 12.    a:椭圆曲线参数a 13.    b:椭圆曲线参数b 14.    p:椭圆曲线参数p 15.    n:曲线的阶n 16.    G_x:基点G的x轴坐标 17.    G_y:基点G的y轴坐标 18.    KEY_x:解密方公钥x轴坐标 19.    KEY_y:解密方公钥y轴坐标 20.    key:解密方私钥 21.    K_G_x:加密方公钥x轴坐标 22.    K_G_y:加密方公钥y轴坐标 23.    K_Q_x:共享密钥x轴坐标 24.    K_Q_y:共享密钥y轴坐标 25.    """</span>  <span class="token number">26</span><span class="token punctuation">.</span>    <span class="token triple-quoted-string string">""" 27.    函数定义如下 28.    get_inverse(): 取逆元 29.    get_gcd():     取最大公约数 30.    get_np():      求解公式Q=np 31.    get_rank():    求曲线的阶n 32.    get_param():   计算p和-p 33.    get_graph():   求解并计算散点图 34.    get_ng():      计算nG 35.    """</span>  <span class="token number">36</span><span class="token punctuation">.</span>      <span class="token number">37</span><span class="token punctuation">.</span>    <span class="token keyword">def</span> <span class="token function">get_inverse</span><span class="token punctuation">(</span>mu<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token number">38</span><span class="token punctuation">.</span>        <span class="token triple-quoted-string string">""" 39.        取逆元 40.        :param mu: 输入参数1 41.        :param p: 曲线的参数p 42.        :return: 参数1的逆元，-1逆元不存在 43.        """</span>  <span class="token number">44</span><span class="token punctuation">.</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token number">45</span><span class="token punctuation">.</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token operator">*</span>mu<span class="token punctuation">)</span><span class="token operator">%</span>p <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>  <span class="token number">46</span><span class="token punctuation">.</span>                <span class="token keyword">return</span> i  <span class="token number">47</span><span class="token punctuation">.</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>  <span class="token number">48</span><span class="token punctuation">.</span>      <span class="token number">49</span><span class="token punctuation">.</span>    <span class="token keyword">def</span> <span class="token function">get_gcd</span><span class="token punctuation">(</span>zi<span class="token punctuation">,</span> mu<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token number">50</span><span class="token punctuation">.</span>        <span class="token triple-quoted-string string">""" 51.        用递归求出最大公约数 52.        :param zi: 输入参数1 53.        :param mu: 输入参数2 54.        :return: 最大公约数 55.        """</span>  <span class="token number">56</span><span class="token punctuation">.</span>        <span class="token keyword">if</span> mu<span class="token punctuation">:</span>  <span class="token number">57</span><span class="token punctuation">.</span>            <span class="token keyword">return</span> get_gcd<span class="token punctuation">(</span>mu<span class="token punctuation">,</span> zi<span class="token operator">%</span>mu<span class="token punctuation">)</span>  <span class="token number">58</span><span class="token punctuation">.</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>  <span class="token number">59</span><span class="token punctuation">.</span>            <span class="token keyword">return</span> zi  <span class="token number">60</span><span class="token punctuation">.</span>      <span class="token number">61</span><span class="token punctuation">.</span>      <span class="token number">62</span><span class="token punctuation">.</span>    <span class="token keyword">def</span> <span class="token function">get_np</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span> y1<span class="token punctuation">,</span> x2<span class="token punctuation">,</span> y2<span class="token punctuation">,</span> a<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token number">63</span><span class="token punctuation">.</span>        <span class="token triple-quoted-string string">""" 64.        求解公式Q=np 65.        :param x1: 点1的x轴坐标 66.        :param y1: 点1的y轴坐标 67.        :param x2: 点2的x轴坐标 68.        :param y2: 点2的y轴坐标 69.        :param a: 曲线参数a 70.        :param p: 曲线参数p 71.        :return: 返回Q的坐标 72.        """</span>  <span class="token number">73</span><span class="token punctuation">.</span>        flag <span class="token operator">=</span> <span class="token number">1</span>  <span class="token comment" spellcheck="true"># 定义符号位（+/-）  </span><span class="token number">74</span><span class="token punctuation">.</span>      <span class="token number">75</span><span class="token punctuation">.</span>        <span class="token comment" spellcheck="true"># 如果 p=q  k=(3x2+a)/2y1mod p  </span><span class="token number">76</span><span class="token punctuation">.</span>        <span class="token keyword">if</span> x1 <span class="token operator">==</span> x2 <span class="token operator">and</span> y1 <span class="token operator">==</span> y2<span class="token punctuation">:</span>  <span class="token number">77</span><span class="token punctuation">.</span>            zi <span class="token operator">=</span> <span class="token number">3</span> <span class="token operator">*</span> <span class="token punctuation">(</span>x1 <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> a  <span class="token comment" spellcheck="true"># 计算分子      【求导】  </span><span class="token number">78</span><span class="token punctuation">.</span>            mu <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> y1    <span class="token comment" spellcheck="true"># 计算分母  </span><span class="token number">79</span><span class="token punctuation">.</span>      <span class="token number">80</span><span class="token punctuation">.</span>        <span class="token comment" spellcheck="true"># 若P≠Q，则k=(y2-y1)/(x2-x1) mod p  </span><span class="token number">81</span><span class="token punctuation">.</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>  <span class="token number">82</span><span class="token punctuation">.</span>            zi <span class="token operator">=</span> y2 <span class="token operator">-</span> y1  <span class="token number">83</span><span class="token punctuation">.</span>            mu <span class="token operator">=</span> x2 <span class="token operator">-</span> x1  <span class="token number">84</span><span class="token punctuation">.</span>            <span class="token keyword">if</span> zi<span class="token operator">*</span> mu <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>  <span class="token number">85</span><span class="token punctuation">.</span>                flag <span class="token operator">=</span> <span class="token number">0</span>        <span class="token comment" spellcheck="true"># 符号0为-（负数）  </span><span class="token number">86</span><span class="token punctuation">.</span>                zi <span class="token operator">=</span> abs<span class="token punctuation">(</span>zi<span class="token punctuation">)</span>  <span class="token number">87</span><span class="token punctuation">.</span>                mu <span class="token operator">=</span> abs<span class="token punctuation">(</span>mu<span class="token punctuation">)</span>  <span class="token number">88</span><span class="token punctuation">.</span>      <span class="token number">89</span><span class="token punctuation">.</span>        <span class="token comment" spellcheck="true"># 将分子和分母化为最简  </span><span class="token number">90</span><span class="token punctuation">.</span>        gcd_value <span class="token operator">=</span> get_gcd<span class="token punctuation">(</span>zi<span class="token punctuation">,</span> mu<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 最大公約數  </span><span class="token number">91</span><span class="token punctuation">.</span>        zi <span class="token operator">=</span> zi <span class="token operator">//</span> gcd_value            <span class="token comment" spellcheck="true"># 整除  </span><span class="token number">92</span><span class="token punctuation">.</span>        mu <span class="token operator">=</span> mu <span class="token operator">//</span> gcd_value  <span class="token number">93</span><span class="token punctuation">.</span>        <span class="token comment" spellcheck="true"># 求分母的逆元  逆元： ∀a ∈G ，ョb∈G 使得 ab = ba = e  </span><span class="token number">94</span><span class="token punctuation">.</span>        <span class="token comment" spellcheck="true"># P(x,y)的负元是 (x,-y mod p)= (x,p-y) ，有P+(-P)= O∞  </span><span class="token number">95</span><span class="token punctuation">.</span>        inverse_value <span class="token operator">=</span> get_inverse<span class="token punctuation">(</span>mu<span class="token punctuation">,</span> p<span class="token punctuation">)</span>  <span class="token number">96</span><span class="token punctuation">.</span>        k <span class="token operator">=</span> <span class="token punctuation">(</span>zi <span class="token operator">*</span> inverse_value<span class="token punctuation">)</span>  <span class="token number">97</span><span class="token punctuation">.</span>      <span class="token number">98</span><span class="token punctuation">.</span>        <span class="token keyword">if</span> flag <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                   <span class="token comment" spellcheck="true"># 斜率负数 flag==0  </span><span class="token number">99</span><span class="token punctuation">.</span>            k <span class="token operator">=</span> <span class="token operator">-</span>k  <span class="token number">100</span><span class="token punctuation">.</span>        k <span class="token operator">=</span> k <span class="token operator">%</span> p  <span class="token number">101</span><span class="token punctuation">.</span>        <span class="token comment" spellcheck="true"># 计算x3,y3 P+Q  </span><span class="token number">102</span><span class="token punctuation">.</span>        <span class="token triple-quoted-string string">""" 103.            x3≡k2-x1-x2(mod p) 104.            y3≡k(x1-x3)-y1(mod p) 105.        """</span>  <span class="token number">106</span><span class="token punctuation">.</span>        x3 <span class="token operator">=</span> <span class="token punctuation">(</span>k <span class="token operator">**</span> <span class="token number">2</span> <span class="token operator">-</span> x1 <span class="token operator">-</span> x2<span class="token punctuation">)</span> <span class="token operator">%</span> p  <span class="token number">107</span><span class="token punctuation">.</span>        y3 <span class="token operator">=</span> <span class="token punctuation">(</span>k <span class="token operator">*</span> <span class="token punctuation">(</span>x1 <span class="token operator">-</span> x3<span class="token punctuation">)</span> <span class="token operator">-</span> y1<span class="token punctuation">)</span> <span class="token operator">%</span> p  <span class="token number">108</span><span class="token punctuation">.</span>        <span class="token keyword">return</span> x3<span class="token punctuation">,</span>y3  <span class="token number">109</span><span class="token punctuation">.</span>      <span class="token number">110</span><span class="token punctuation">.</span>    <span class="token keyword">def</span> <span class="token function">get_rank</span><span class="token punctuation">(</span>x0<span class="token punctuation">,</span> y0<span class="token punctuation">,</span> a<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token number">111</span><span class="token punctuation">.</span>        <span class="token triple-quoted-string string">""" 112.        计算曲线的阶n 113.        :param x0: 输入点的x轴坐标 114.        :param y0: 输入点的y轴坐标 115.        :param a: 曲线参数a 116.        :param p: 曲线参数p 117.        :return: 曲线的阶n 118.        """</span>  <span class="token number">119</span><span class="token punctuation">.</span>        x1 <span class="token operator">=</span> x0             <span class="token comment" spellcheck="true">#-p的x坐标  </span><span class="token number">120</span><span class="token punctuation">.</span>        y1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">*</span>y0<span class="token punctuation">)</span><span class="token operator">%</span>p      <span class="token comment" spellcheck="true">#-p的y坐标  </span><span class="token number">121</span><span class="token punctuation">.</span>        tempX <span class="token operator">=</span> x0  <span class="token number">122</span><span class="token punctuation">.</span>        tempY <span class="token operator">=</span> y0  <span class="token number">123</span><span class="token punctuation">.</span>        n <span class="token operator">=</span> <span class="token number">1</span>  <span class="token number">124</span><span class="token punctuation">.</span>        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>  <span class="token number">125</span><span class="token punctuation">.</span>            n <span class="token operator">+=</span> <span class="token number">1</span>  <span class="token number">126</span><span class="token punctuation">.</span>            <span class="token comment" spellcheck="true">#         # 求p+q的和，得到n*p，直到求出阶  </span><span class="token number">127</span><span class="token punctuation">.</span>            p_x<span class="token punctuation">,</span>p_y <span class="token operator">=</span> get_np<span class="token punctuation">(</span>tempX<span class="token punctuation">,</span> tempY<span class="token punctuation">,</span> x0<span class="token punctuation">,</span> y0<span class="token punctuation">,</span> a<span class="token punctuation">,</span> p<span class="token punctuation">)</span>  <span class="token number">128</span><span class="token punctuation">.</span>            <span class="token comment" spellcheck="true"># 如果 == -p,那么阶数+1，返回  </span><span class="token number">129</span><span class="token punctuation">.</span>            <span class="token keyword">if</span> p_x <span class="token operator">==</span> x1 <span class="token operator">and</span> p_y <span class="token operator">==</span> y1<span class="token punctuation">:</span>  <span class="token number">130</span><span class="token punctuation">.</span>                <span class="token keyword">return</span> n<span class="token operator">+</span><span class="token number">1</span>  <span class="token number">131</span><span class="token punctuation">.</span>            tempX <span class="token operator">=</span> p_x  <span class="token number">132</span><span class="token punctuation">.</span>            tempY <span class="token operator">=</span> p_y  <span class="token number">133</span><span class="token punctuation">.</span>      <span class="token number">134</span><span class="token punctuation">.</span>      <span class="token number">135</span><span class="token punctuation">.</span>    <span class="token keyword">def</span> <span class="token function">get_param</span><span class="token punctuation">(</span>x0<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token number">136</span><span class="token punctuation">.</span>        <span class="token triple-quoted-string string">""" 137.        计算P和-P 138.        :param x0:点的x轴坐标 139.        :param a:曲线参数a 140.        :param b:曲线参数b 141.        :param p:曲线参数p 142.        :return:点P和-P 143.        """</span>  <span class="token number">144</span><span class="token punctuation">.</span>        y0 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>  <span class="token number">145</span><span class="token punctuation">.</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token number">146</span><span class="token punctuation">.</span>            <span class="token comment" spellcheck="true"># 满足取模约束条件，椭圆曲线Ep(a,b)，p为质数，x,y∈[0,p-1]  </span><span class="token number">147</span><span class="token punctuation">.</span>            <span class="token keyword">if</span> i<span class="token operator">**</span><span class="token number">2</span><span class="token operator">%</span>p <span class="token operator">==</span> <span class="token punctuation">(</span>x0<span class="token operator">**</span><span class="token number">3</span> <span class="token operator">+</span> a<span class="token operator">*</span>x0 <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token operator">%</span>p<span class="token punctuation">:</span>  <span class="token number">148</span><span class="token punctuation">.</span>                y0 <span class="token operator">=</span> i  <span class="token number">149</span><span class="token punctuation">.</span>                <span class="token keyword">break</span>  <span class="token number">150</span><span class="token punctuation">.</span>      <span class="token number">151</span><span class="token punctuation">.</span>        <span class="token comment" spellcheck="true"># 如果y0没有，返回false  </span><span class="token number">152</span><span class="token punctuation">.</span>        <span class="token keyword">if</span> y0 <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>  <span class="token number">153</span><span class="token punctuation">.</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>  <span class="token number">154</span><span class="token punctuation">.</span>      <span class="token number">155</span><span class="token punctuation">.</span>        <span class="token comment" spellcheck="true"># 计算-y（负数取模）  </span><span class="token number">156</span><span class="token punctuation">.</span>        x1 <span class="token operator">=</span> x0  <span class="token number">157</span><span class="token punctuation">.</span>        y1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">*</span>y0<span class="token punctuation">)</span> <span class="token operator">%</span> p  <span class="token number">158</span><span class="token punctuation">.</span>        <span class="token keyword">return</span> x0<span class="token punctuation">,</span>y0<span class="token punctuation">,</span>x1<span class="token punctuation">,</span>y1  <span class="token number">159</span><span class="token punctuation">.</span>      <span class="token number">160</span><span class="token punctuation">.</span>    <span class="token keyword">def</span> <span class="token function">get_graph</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token number">161</span><span class="token punctuation">.</span>        <span class="token triple-quoted-string string">""" 162.        求解并计算散点图 163.        :param a: 曲线参数a 164.        :param b: 曲线参数b 165.        :param p: 曲线参数p 166.        :return: 返回一个二维数组并打印，大小[p][p] 167.        """</span>  <span class="token number">168</span><span class="token punctuation">.</span>        x_y <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token number">169</span><span class="token punctuation">.</span>        <span class="token comment" spellcheck="true"># 初始化二维数组，将所有的数组元素用-填充  </span><span class="token number">170</span><span class="token punctuation">.</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token number">171</span><span class="token punctuation">.</span>            x_y<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'-'</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token number">172</span><span class="token punctuation">.</span>      <span class="token number">173</span><span class="token punctuation">.</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token number">174</span><span class="token punctuation">.</span>            val <span class="token operator">=</span>get_param<span class="token punctuation">(</span>i<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> p<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 椭圆曲线上的点  </span><span class="token number">175</span><span class="token punctuation">.</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>val <span class="token operator">!=</span> <span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token number">176</span><span class="token punctuation">.</span>                x0<span class="token punctuation">,</span>y0<span class="token punctuation">,</span>x1<span class="token punctuation">,</span>y1 <span class="token operator">=</span> val  <span class="token number">177</span><span class="token punctuation">.</span>                x_y<span class="token punctuation">[</span>x0<span class="token punctuation">]</span><span class="token punctuation">[</span>y0<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>  <span class="token number">178</span><span class="token punctuation">.</span>                x_y<span class="token punctuation">[</span>x1<span class="token punctuation">]</span><span class="token punctuation">[</span>y1<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>  <span class="token number">179</span><span class="token punctuation">.</span>      <span class="token number">180</span><span class="token punctuation">.</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"椭圆曲线的散列图为："</span><span class="token punctuation">)</span>  <span class="token number">181</span><span class="token punctuation">.</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">:</span>              <span class="token comment" spellcheck="true"># i= 0-> p-1  </span><span class="token number">182</span><span class="token punctuation">.</span>            temp <span class="token operator">=</span> p<span class="token number">-1</span><span class="token operator">-</span>i        <span class="token comment" spellcheck="true"># 倒序  </span><span class="token number">183</span><span class="token punctuation">.</span>      <span class="token number">184</span><span class="token punctuation">.</span>            <span class="token comment" spellcheck="true"># 格式化输出1/2位数，y坐标轴  </span><span class="token number">185</span><span class="token punctuation">.</span>            <span class="token keyword">if</span> temp <span class="token operator">>=</span> <span class="token number">10</span><span class="token punctuation">:</span>  <span class="token number">186</span><span class="token punctuation">.</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>temp<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">" "</span><span class="token punctuation">)</span>  <span class="token number">187</span><span class="token punctuation">.</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>  <span class="token number">188</span><span class="token punctuation">.</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>temp<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">"  "</span><span class="token punctuation">)</span>  <span class="token number">189</span><span class="token punctuation">.</span>      <span class="token number">190</span><span class="token punctuation">.</span>            <span class="token comment" spellcheck="true"># 输出具体坐标的值，一行  </span><span class="token number">191</span><span class="token punctuation">.</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token number">192</span><span class="token punctuation">.</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>x_y<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>temp<span class="token punctuation">]</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">"  "</span><span class="token punctuation">)</span>  <span class="token number">193</span><span class="token punctuation">.</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#换行  </span><span class="token number">194</span><span class="token punctuation">.</span>      <span class="token number">195</span><span class="token punctuation">.</span>        <span class="token comment" spellcheck="true"># 输出 x 坐标轴  </span><span class="token number">196</span><span class="token punctuation">.</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"  "</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span>  <span class="token number">197</span><span class="token punctuation">.</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token number">198</span><span class="token punctuation">.</span>            <span class="token keyword">if</span> i <span class="token operator">>=</span><span class="token number">10</span><span class="token punctuation">:</span>  <span class="token number">199</span><span class="token punctuation">.</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">" "</span><span class="token punctuation">)</span>  <span class="token number">200</span><span class="token punctuation">.</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>  <span class="token number">201</span><span class="token punctuation">.</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">"  "</span><span class="token punctuation">)</span>  <span class="token number">202</span><span class="token punctuation">.</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>  <span class="token number">203</span><span class="token punctuation">.</span>      <span class="token number">204</span><span class="token punctuation">.</span>    <span class="token keyword">def</span> <span class="token function">get_ng</span><span class="token punctuation">(</span>G_x<span class="token punctuation">,</span> G_y<span class="token punctuation">,</span> key<span class="token punctuation">,</span> a<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token number">205</span><span class="token punctuation">.</span>        <span class="token triple-quoted-string string">""" 206.        求解nG 207.        :param G_x: G的x轴坐标 208.        :param G_y: G的y轴坐标 209.        :param key: 解密方私钥 210.        :param a: 曲线参数a 211.        :param p: 曲线参数p 212.        :return: nG的坐标 213.        """</span>  <span class="token number">214</span><span class="token punctuation">.</span>        temp_x <span class="token operator">=</span> G_x  <span class="token number">215</span><span class="token punctuation">.</span>        temp_y <span class="token operator">=</span> G_y  <span class="token number">216</span><span class="token punctuation">.</span>        <span class="token keyword">while</span> key <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">:</span>  <span class="token number">217</span><span class="token punctuation">.</span>            temp_x<span class="token punctuation">,</span>temp_y <span class="token operator">=</span> get_np<span class="token punctuation">(</span>temp_x<span class="token punctuation">,</span>temp_y<span class="token punctuation">,</span> G_x<span class="token punctuation">,</span> G_y<span class="token punctuation">,</span> a<span class="token punctuation">,</span> p<span class="token punctuation">)</span>  <span class="token number">218</span><span class="token punctuation">.</span>            key <span class="token operator">-=</span> <span class="token number">1</span>  <span class="token number">219</span><span class="token punctuation">.</span>        <span class="token keyword">return</span> temp_x<span class="token punctuation">,</span>temp_y  <span class="token number">220</span><span class="token punctuation">.</span>      <span class="token number">221</span><span class="token punctuation">.</span>    <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token number">222</span><span class="token punctuation">.</span>        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>  <span class="token number">223</span><span class="token punctuation">.</span>            a <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">"请输入a的值："</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token number">224</span><span class="token punctuation">.</span>            b <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">"请输入b的值："</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token number">225</span><span class="token punctuation">.</span>            p <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">"请输入p的值："</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#用作模运算  </span><span class="token number">226</span><span class="token punctuation">.</span>            <span class="token comment" spellcheck="true"># 条件满足判断  </span><span class="token number">227</span><span class="token punctuation">.</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token operator">*</span><span class="token punctuation">(</span>a<span class="token operator">**</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">27</span><span class="token operator">*</span><span class="token punctuation">(</span>b<span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">%</span>p <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token number">228</span><span class="token punctuation">.</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"您输入的参数有误，请重新输入！！！\n"</span><span class="token punctuation">)</span>  <span class="token number">229</span><span class="token punctuation">.</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>  <span class="token number">230</span><span class="token punctuation">.</span>                <span class="token keyword">break</span>  <span class="token number">231</span><span class="token punctuation">.</span>        <span class="token comment" spellcheck="true">#利用隐函数画出椭圆曲线大致的图  </span><span class="token number">232</span><span class="token punctuation">.</span>        ezplot <span class="token operator">=</span> <span class="token keyword">lambda</span> expr<span class="token punctuation">:</span> plot_implicit<span class="token punctuation">(</span>parse_expr<span class="token punctuation">(</span>expr<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token number">233</span><span class="token punctuation">.</span>        ttte <span class="token operator">=</span><span class="token string">'x*x*x+x*'</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">+</span><span class="token string">'+'</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'-y*y'</span>  <span class="token number">234</span><span class="token punctuation">.</span>        ezplot<span class="token punctuation">(</span>ttte<span class="token punctuation">)</span>  <span class="token number">235</span><span class="token punctuation">.</span>        mp<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token number">236</span><span class="token punctuation">.</span>        <span class="token comment" spellcheck="true">#确认输入图谱  </span><span class="token number">237</span><span class="token punctuation">.</span>        tur <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">"请确曲线：1确认，0退出\n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token number">238</span><span class="token punctuation">.</span>        <span class="token keyword">if</span> tur <span class="token operator">!=</span><span class="token number">0</span> <span class="token punctuation">:</span>  <span class="token number">239</span><span class="token punctuation">.</span>            <span class="token comment" spellcheck="true"># 输出椭圆曲线散点图  </span><span class="token number">240</span><span class="token punctuation">.</span>            get_graph<span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> p<span class="token punctuation">)</span>  <span class="token number">241</span><span class="token punctuation">.</span>            <span class="token comment" spellcheck="true"># 选点作为G点  </span><span class="token number">242</span><span class="token punctuation">.</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"1：在如上坐标系中选一个值为G的坐标"</span><span class="token punctuation">)</span>  <span class="token number">243</span><span class="token punctuation">.</span>            G_x <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">"1：请输入选取的x坐标值："</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token number">244</span><span class="token punctuation">.</span>            G_y <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">"1：请输入选取的y坐标值："</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token number">245</span><span class="token punctuation">.</span>            <span class="token comment" spellcheck="true"># 获取椭圆曲线的阶  </span><span class="token number">246</span><span class="token punctuation">.</span>            n <span class="token operator">=</span> get_rank<span class="token punctuation">(</span>G_x<span class="token punctuation">,</span> G_y<span class="token punctuation">,</span> a<span class="token punctuation">,</span> p<span class="token punctuation">)</span>  <span class="token number">247</span><span class="token punctuation">.</span>            <span class="token comment" spellcheck="true"># user1生成私钥，小key  </span><span class="token number">248</span><span class="token punctuation">.</span>            key <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">"1：请输入私钥小key（&lt;&amp;#123;&amp;#125;）："</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token number">249</span><span class="token punctuation">.</span>            <span class="token comment" spellcheck="true"># user1生成公钥，大KEY  </span><span class="token number">250</span><span class="token punctuation">.</span>      <span class="token number">251</span><span class="token punctuation">.</span>      <span class="token number">252</span><span class="token punctuation">.</span>            KEY_x<span class="token punctuation">,</span> kEY_y <span class="token operator">=</span> get_ng<span class="token punctuation">(</span>G_x<span class="token punctuation">,</span> G_y<span class="token punctuation">,</span> key<span class="token punctuation">,</span> a<span class="token punctuation">,</span> p<span class="token punctuation">)</span>  <span class="token number">253</span><span class="token punctuation">.</span>      <span class="token number">254</span><span class="token punctuation">.</span>            <span class="token comment" spellcheck="true"># user2阶段  </span><span class="token number">255</span><span class="token punctuation">.</span>            <span class="token comment" spellcheck="true"># user2拿到user1的公钥KEY，Ep(a,b)阶n，加密需要加密的明文数据  </span><span class="token number">256</span><span class="token punctuation">.</span>            <span class="token comment" spellcheck="true"># 加密准备  </span><span class="token number">257</span><span class="token punctuation">.</span>            k <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">"2：请输入一个整数k（&lt;&amp;#123;&amp;#125;）用于求kG和kQ："</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token number">258</span><span class="token punctuation">.</span>            k_G_x<span class="token punctuation">,</span> k_G_y <span class="token operator">=</span> get_ng<span class="token punctuation">(</span>G_x<span class="token punctuation">,</span> G_y<span class="token punctuation">,</span> k<span class="token punctuation">,</span> a<span class="token punctuation">,</span> p<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># kG  </span><span class="token number">259</span><span class="token punctuation">.</span>            k_Q_x<span class="token punctuation">,</span> k_Q_y <span class="token operator">=</span> get_ng<span class="token punctuation">(</span>KEY_x<span class="token punctuation">,</span> kEY_y<span class="token punctuation">,</span> k<span class="token punctuation">,</span> a<span class="token punctuation">,</span> p<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># kQ  </span><span class="token number">260</span><span class="token punctuation">.</span>      <span class="token number">261</span><span class="token punctuation">.</span>            <span class="token comment" spellcheck="true"># 加密  </span><span class="token number">262</span><span class="token punctuation">.</span>            plain_text <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"2：请输入需要加密的字符串:"</span><span class="token punctuation">)</span>  <span class="token number">263</span><span class="token punctuation">.</span>            plain_text <span class="token operator">=</span> plain_text<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token number">264</span><span class="token punctuation">.</span>            <span class="token comment" spellcheck="true"># plain_text = int(input("user1：请输入需要加密的密文："))  </span><span class="token number">265</span><span class="token punctuation">.</span>            c <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token number">266</span><span class="token punctuation">.</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"密文为："</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span>  <span class="token number">267</span><span class="token punctuation">.</span>            <span class="token keyword">for</span> char <span class="token keyword">in</span> plain_text<span class="token punctuation">:</span>  <span class="token number">268</span><span class="token punctuation">.</span>                intchar <span class="token operator">=</span> ord<span class="token punctuation">(</span>char<span class="token punctuation">)</span>  <span class="token number">269</span><span class="token punctuation">.</span>                cipher_text <span class="token operator">=</span> intchar <span class="token operator">*</span> k_Q_x  <span class="token number">270</span><span class="token punctuation">.</span>                c<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>k_G_x<span class="token punctuation">,</span> k_G_y<span class="token punctuation">,</span> cipher_text<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token number">271</span><span class="token punctuation">.</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"(&amp;#123;&amp;#125;,&amp;#123;&amp;#125;),&amp;#123;&amp;#125;"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>k_G_x<span class="token punctuation">,</span> k_G_y<span class="token punctuation">,</span> cipher_text<span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">"-"</span><span class="token punctuation">)</span>  <span class="token number">272</span><span class="token punctuation">.</span>      <span class="token number">273</span><span class="token punctuation">.</span>            <span class="token comment" spellcheck="true"># user1阶段  </span><span class="token number">274</span><span class="token punctuation">.</span>            <span class="token comment" spellcheck="true"># 拿到user2加密的数据进行解密  </span><span class="token number">275</span><span class="token punctuation">.</span>            <span class="token comment" spellcheck="true"># 知道 k_G_x,k_G_y，key情况下，求解k_Q_x,k_Q_y是容易的，然后plain_text = cipher_text/k_Q_x  </span><span class="token number">276</span><span class="token punctuation">.</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\n1解密得到明文："</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span>  <span class="token number">277</span><span class="token punctuation">.</span>            <span class="token keyword">for</span> charArr <span class="token keyword">in</span> c<span class="token punctuation">:</span>  <span class="token number">278</span><span class="token punctuation">.</span>                decrypto_text_x<span class="token punctuation">,</span> decrypto_text_y <span class="token operator">=</span> get_ng<span class="token punctuation">(</span>charArr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> charArr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> a<span class="token punctuation">,</span> p<span class="token punctuation">)</span>  <span class="token number">279</span><span class="token punctuation">.</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>chr<span class="token punctuation">(</span>charArr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">//</span> decrypto_text_x<span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span>  <span class="token number">280</span><span class="token punctuation">.</span>      <span class="token number">281</span><span class="token punctuation">.</span>    <span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>  <span class="token number">282</span><span class="token punctuation">.</span>        <span class="token comment" spellcheck="true">#调用函数,作为程序的入口,自定义程序运行顺序  </span><span class="token number">283</span><span class="token punctuation">.</span>        main<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token number">284</span><span class="token punctuation">.</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\n结束"</span><span class="token punctuation">)</span> </code></pre><p>以上便是本文所有内容了，如果喜欢请收藏本站</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> ECC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 加密算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kalma Filter学习笔记</title>
      <link href="/blog/2020/02/20/kalma-filter/"/>
      <url>/blog/2020/02/20/kalma-filter/</url>
      
        <content type="html"><![CDATA[<h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1 前言"></a>1 前言</h1><p>Kalma Filter应用十分广泛，比如导航中</p><p>为什么要使用Kalma Filter呢？</p><p>因为我们生活中的系统存在许多不确定性：</p><ul><li>并不存在完美的数学模型</li><li>大部分的系统模型不可控，也很难建模</li><li>测量传感器自身存在误差</li></ul><p>如何来理解Kalma Filter呢？</p><p><img src="0.jpg" alt="举个栗子！"></p><p>让一个人去测量一枚硬币的大小，测量结果为Z_k</p><p>k意味第k次测量</p><p>假设测量结果为</p><p>Z_1 = 50.2mm</p><p>Z_2 = 50.1mm</p><p>Z_3 = 50.4mm</p><p>….</p><p>这时我们想要知道硬币真实的数据，只需要把所有数据加起来取平均值就可以了，公式如下，我们将他处理一下：</p><p><img src="1.png"></p><p>这里我们可以知道，当k越大，1/k越趋近于0</p><p><img src="2.png"></p><p>也就是说，当k足够大的时候，后续的测试结果就不那么重要了</p><p>我们继续处理这个式子变成如下：</p><p><img src="3.png" alt="①式"></p><p>我们来这么理解：</p><p>当前的估计值 = 上一次的估计值 + 系数 * （当前测量值 - 上一次的估计值）</p><p>而这个系数K就是卡尔曼增益（因数）</p><p>从这个式子里我们可以看到，新的估计值只与上一次的估计只有关，上一次的估计值又只与上上一次的估计值有关，这是一种递归</p><p>在卡尔曼中，你不需要很久以前的数据，只需要上一次的就足够了</p><p>这里我们引入一个新的概念：</p><p>估计误差：E_est  </p><p>测量误差：E_mea</p><p>E：Error</p><p>est：Estimate</p><p>mea：Measurement</p><p>而K就等于：</p><p><img src="4.png"></p><p>在k时刻，当E_est_k-1 &gt;&gt;  E_mea_k 时：K→1，①式变为：</p><p><img src="5.png"></p><p>意味当k-1时的估计误差远大于第k次的测量误差，那么我们的估计值X_k就很趋近于测量值Z_k</p><p>同样，在k时刻，当E_est_k-1 &lt;&lt;  E_mea_k 时：K→0，①式变为：</p><p><img src="6.png"></p><p>意味当我们的估计误差足够大的时候，我们选择更相信测量值</p><p>有了上面这些东西，我们就可以着手这个简单的问题了</p><ul><li>计算：<img src="4.png"></li><li>计算：<img src="7.png"></li><li>更新：<img src="8.png"></li></ul><p>有了这三个公式，让我们来试试下面这个问题：</p><p>有一个条度为<del>50mm</del>的线，我们想要知道它的确切长度，但幸运的是你的<del>测量误差</del>尺子十分的理想，你觉得它的误差为3mm，但不幸运的是你的<del>估计误差</del>估计很不准，有5mm的误差，这时我们想要知道这条线到底有多长，我们需要结合两个测量</p><p>假设我们得出了以下数据：</p><ul><li>第一次的估计值=40mm</li><li>估计误差5mm</li><li>第一次的测量值=51mm</li><li>测量误差3mm</li></ul><p>我们可以借助三个公式用Excel表格进行计算，数据输出如下：</p><p><img src="9.png"></p><p>将公式输入Excel表格并求解画出图像</p><p><img src="10.png"></p><p>可以看到当我们进行五次迭代以后，数据已经非常接近真实值，至此，前言结束，Excal公式如下，想动手的朋友可以自己去试试：</p><ul><li>计算部分从第三行开始，所以这里直接放公式</li><li>D3=D2+E3*(B3-D2)</li><li>E3=F2/(F2+C3)</li><li>F3=(1-E3)*F2</li></ul><h1 id="2-进阶部分"><a href="#2-进阶部分" class="headerlink" title="2 进阶部分"></a>2 进阶部分</h1><p>通过上述栗子我们可以大致了解到Kalman Filter基本思想，但也许有人会说上面的例子里直接数据求算数平均不是更快么？</p><p>确实，在一些比较普通的系统中，Kalman Filter的作用并没有那么明显，但在一些复杂系统中，Kalman Filter能发挥出更大的优势</p><p>回归正题，我们来看下面一个栗子<del>（数据融合）</del>：</p><p>如果我们想要知道一个物体的真实重量，那么我们最简单的办法就是找个秤称一下，但是如果一个称不准呢，那么我们可以再找一个秤，得到两个数据以及两个秤的标准差：</p><ul><li>Z_1 = 30g</li><li>Z_2 = 32g</li><li>σ_1 = 2g</li><li>σ_2 = 3g</li></ul><p><img src="11.png" alt="一个标准的正态分布图"></p><p>两个正态分布图会有交叉的部分，而如果我们想要知道真实的数据，那么这个真实的数据将会落在交叉的部分，并且会更靠近σ_1那部分</p><p><img src="12.png" alt="大概就是这个样子，画的不好见谅"></p><p>由此，我们写出一个公式估计真实值Z：</p><p><img src="13.png"></p><p>K依然是卡尔曼增益，在这里，我们需要求解K，使得方差最小</p><p><img src="14.png"></p><p>由方差的性质可以将这两个分开</p><p><img src="15.png"></p><p>将σ_1 =2g和 σ_2=3g带入</p><p>可以得到K=0.2</p><p>带入公式：</p><p><img src="13.png"></p><p>得出最优估计值Z=30.4g</p><p>可以计算出它的σ = 1.79</p><p>再来看一个例子<del>（协方差矩阵）方差协方差在一个矩阵中表现出来</del>：</p><p><img src="16.png"></p><hr><p>状态空间表达：</p><p><img src="17.png"></p><p>一个简单的栗子，弹簧系统的栗子，F是力，x位移，k弹性系数，B阻尼系数，m质量</p><p>得出方程：</p><p><img src="18.png"></p><p>将上面的公式用矩阵来表示：</p><p><img src="19.png"></p><p>我们可以将其归纳为：</p><p><img src="20.png"></p><p>这里的是连续形式，X(t)随时间变化</p><p>而我们也可以把它写成离散形式：</p><p><img src="21.png"></p><p>这里的下标k、k-1、k+1等都是时间单位</p><p>但现实世界中存在许多不确定性，我们现有的模型不能很好的反应实际情况，所以我们的模型需要改变一下：</p><p><img src="22.png"></p><p>这里的w_k-1和v_k分别代表过程噪音和测量噪音</p><p>一式计算结果</p><p>二试测量结果</p><p>这就是状态空间方程</p><hr><p>虽然过程噪声不可测量，但是我们可以用正态分布来表示</p><ul><li><p>P(w)~(0,Q)0期望，Q协方差矩阵</p></li><li><p>Q=E[w,w^T]</p></li><li><p><img src="23.png"></p></li></ul><p>同理，P(v)~(0,R)0期望，R协方差矩阵，推理过程一样，这里就不写了</p><hr><p>用数据融合的思想来处理一下我们的公式</p><p>先验：</p><p><img src="35.png"></p><p>后验：</p><p><img src="24.png"></p><p>X-_k为先验估计，K与误差大小息息相关K属于[0,H-]，为了量化误差，我们引入E_k</p><p><img src="25.png"></p><p>这里的x_k是真实值，X_k是估计值，化简的出：</p><p><img src="26.png"></p><p>将结果带入原式：</p><p><img src="27.png"></p><p><img src="28.png"></p><p>当测量结果误差小的时候，K_k=H-，当测量误差很大的时候，K_k=0，至此我们已经推导出卡尔曼增益系数K</p><hr><p><img src="29.png"></p><p><img src="30.png"></p><p>有了这个式子，我们就可利用卡尔曼滤波器来预测状态变量的值了</p><p>如此一来，我们总结一下我们所得到的式子将上面的X均带上帽子：</p><p><img src="31.png"></p><p><img src="32.png"></p><p>这就是卡尔曼滤波器的全部五个公式了</p><h1 id="3-示例"><a href="#3-示例" class="headerlink" title="3 示例"></a>3 示例</h1><p><img src="33.png"></p><p><img src="34.png"></p><p>大家可以自行使用这个例子代入合适的数据去计算结果，其中除手写部分均为Math Type输入截图，总结不易希望大家喜欢。</p><p>参考：<a href="https://www.bilibili.com/video/BV1ez4y1X7eR/?spm_id_from=333.788.videocard.2">https://www.bilibili.com/video/BV1ez4y1X7eR/?spm_id_from=333.788.videocard.2</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Kalma_Filter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kalma_Filter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何建立属于自己的博客</title>
      <link href="/blog/2020/02/17/my-blog/"/>
      <url>/blog/2020/02/17/my-blog/</url>
      
        <content type="html"><![CDATA[<h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h1><p>​        搭建博客的准备事项如下：  </p><ul><li>Hexo</li><li>Node.js</li></ul><ul><li><p>github账号，或者gitee账号</p><p>本次所使用环境为Windows，linux也可按照同样的方式安装，步骤略有不同   </p></li></ul><h1 id="2-环境准备以及软件安装工作"><a href="#2-环境准备以及软件安装工作" class="headerlink" title="2.环境准备以及软件安装工作"></a>2.环境准备以及软件安装工作</h1><h2 id="2-1-git"><a href="#2-1-git" class="headerlink" title="2.1 git"></a>2.1 git</h2><p>​        前往<a href="https://git-scm.com/download">官网</a>下载对应操作系统的Git版本，此处无脑下一步即可</p><p>​        安装完成之后使用win+r组合键打开运行，输入cmd回车进入命令行，输入git会弹出如下信息，此为安装成功</p><p>​    <img src="5-17-1.png"></p><h2 id="2-2-Node-js"><a href="#2-2-Node-js" class="headerlink" title="2.2 Node.js"></a>2.2 Node.js</h2><p>前往<a href="https://nodejs.org/zh-cn/">官网</a>下载长期支持版，此处无脑下一步即可</p><h2 id="2-3-Hexo"><a href="#2-3-Hexo" class="headerlink" title="2.3 Hexo"></a>2.3 Hexo</h2><p>Git和Node.js安装成功之后，需要创建一个用来存放博客的文件夹，在此创建名为blog的文件夹，此处命名按个人喜好，但不要是中文，下面就可以开始安装Hexo了</p><p>打开所创建文件夹，下文中均以blog指代，右键点击Git Bash Here<del>注 在Git Bash中不能使用传统Ctrl+V进行粘贴，建议右键粘贴</del></p><p><code>npm install -g hexo-cli</code></p><p><code>hexo init</code></p><p>注 此处hexo init是用git clone拉取远端文件，建议在执行这一步之前先尝试如下几个链接，若能成功打开即可直接执行hexo init，若不能打开，建议修改Hosts文件</p><ul><li><p><a href="https://github.com/">git官网</a></p></li><li><p><a href="https://github.com/mashirozx/Sakura">gitclone</a></p><p>第一个能打开，第二个点击下图中Download ZIP，若能下载，则跳过如下步骤直接hexo init即可</p><p><img src="5-17-4.png"></p><p>如果github官网打不开建议魔法上网，然后再试一次，若还是不行建议访问<a href="https://www.ipaddress.com/">这个地址</a></p><p><img src="5-17-2.png"></p><p>输入github.com回车</p><p><img src="5-17-3.png"></p><p>复制图中 IP Address后面的内容，找到C盘(系统盘)C:\Windows\System32\drivers\etc路径下的HOSTS文件<del>这个文件并没有后缀，有后缀的文件为电脑杀毒软件留下的副本用于恢复的，可以可以不用管</del></p><p>右键用记事本打开，在最后一行输入：</p><p><code>*** github.com</code></p><p>将你刚才复制的IP地址粘贴到这个***的位置并保存，如果手动输入，记得千万要在IP地址和网址中间加上空格，操作完成后win+r打开命令行，断开魔法上网，输入ipconfig回车，在输入ping github.com，若能ping通，则直接打开github.com即可</p><p>若第二个无法下载，同样访问<a href="https://www.ipaddress.com/">这个地址</a></p><p>输入：</p><p><code>codeload.github.com</code></p><p><code>raw.githubusercontent.com</code></p><p>并重复上面那个步骤，将IP地址填入HOSTS文件当中，命令行执行ipconfig，在尝试一次下载</p><hr><p>上述步骤完成后，在Git Bash中输入：</p><p><code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</code></p><p>组合命令，hexo clean是清除缓存，hexo g生成博客静态内容，hexo s本地预览</p><p>这里如果是第一次运行，可能要等的久一点，成功之后会有一句：</p><p><code>INFO  Hexo is running at http://localhost:4000 . Press Ctrl+C to stop.</code></p><p>复制其中localhost:4000到浏览器中粘贴并回车，进行预览，同时如果在文件夹内修改内容也会上传到你正在预览的网页中，只需要刷新就可更新出新内容，这里Ctrl+C可以推出预览</p><p>放一张成功之后的图:</p><p><img src="zan.png"></p><hr><p>但这个时候，我们的网站只能我们自己看得见，想让别人看见我们需要将它推送到云端上去，这里选择国内访问较快的gitee</p></li></ul><h2 id="2-4-gitee配置"><a href="#2-4-gitee配置" class="headerlink" title="2.4 gitee配置"></a>2.4 gitee配置</h2><p>​        上<a href="https://gitee.com/">gitee主页</a>注册账户</p><p>​        创建一个仓库：</p><p>​        <img src="5-17-5.png"></p><p>​        仓库名称为：仓库名称和路径都可以按照自己喜好（别是中文就好）</p><p>​        <img src="5-17-6.png"></p><p>​        生成之后会有一个路径，复制下来</p><p>​        我们转到我们的blog文件夹，打开文件夹下的_config.yml</p><p>​        在最后一行deploy中修改type和repo的值</p><p>​        <code>type: git</code></p><p>​        <code>repo: https://gitee.com/****    # 仓库的URL</code></p><p>​        修改之后保存，这时候我们需要安装插件，在Git Bash中输入以下内容一个一个执行</p><p>​        <code>npm install hexo-deployer-git --save    # 安装git插件</code></p><p>​        <code>git config --global user.email *********@qq.com    # 设置gitee邮箱（gitee的注册邮箱）</code></p><p>​        <code>git config --global user.name '****'    # 设置用户名（git的注册昵称）</code></p><p>​        <code>hexo d    # 上传到gitee</code></p><p>​        在上传的过程中可能会弹出让你从新输入账号以及密码的窗口，输入就好，这一步可能时间有些长，不用担心放着让他继续进行就好</p><p>​        上传成功后，仓库中会有你本地blog的内容</p><p>​        点击图中位置的Gitee pages</p><p>​        <img src="5-17-7.png"></p><p>​        输入图中内容点击更新</p><p>​        <img src="5-17-8.png"></p><p>​        这时候点击出现的网站地址就好，本次网站建立到此结束</p><hr><h2 id="2-5-需要注意的地方"><a href="#2-5-需要注意的地方" class="headerlink" title="2.5 需要注意的地方"></a>2.5 需要注意的地方</h2><ul><li>如果过程中出了问题，改不回来了，就直接干掉本地的blog文件夹，从头再来一遍即可</li><li>若是修改了本地文件预览通过了，上传之后，记得更新Gitee Pages服务，才能生成，若是还没有反应，直接shift+f5刷新即可</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
