<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>ECC加密算法</title>
      <link href="/blog/2020/03/02/ecc/"/>
      <url>/blog/2020/03/02/ecc/</url>
      
        <content type="html"><![CDATA[<h1 id="原理介绍"><a href="#原理介绍" class="headerlink" title="原理介绍"></a>原理介绍</h1><p>在ECC中，利用特殊形式的椭圆曲线，其方程如下：</p><p><img src="0.png"></p><p>其中：</p><p><img src="1.png"></p><p>这个是用来排除单数曲线所必须的，其中<em>a</em>和<em>b</em>决定了曲线在坐标系的不同形状。</p><p>在开始之前我们需要引入一个定义——Abel（阿贝尔群）：</p><p>数学上是指定义了二元操作运算并且使用“+”表示的一个集合。必须满足以下要求：</p><p>1、封闭性（closure）：如果<em>a</em>和<em>b</em>都是群成员，那么<em>a</em> + <em>b</em>也应该是群成员。</p><p>2、组合性（associativity）：*(a+b)+c=a+(b+c)*</p><p>3、单位元：0值就是单位元。</p><p>4、逆元：<em>a</em>的逆元就是-<em>a</em>。</p><p>当然阿贝尔群除了上面的性质外还满足交换律公理a<em>b=b</em>a。</p><p>同样在椭圆曲线也可以定义阿贝尔群：</p><p>1、设<em>O</em>为单位元，对曲线上所有的点<em>P</em>都满足P+O=P。</p><p>2、对点<em>P</em>（<em>x</em>，<em>y</em>）有点<em>Q</em>（<em>x</em>，-<em>y</em>）满足<em>P+Q=O</em>，则称点<em>Q</em>为<em>P</em>的逆元，记为-<em>P</em>，在此基础上我们可以定义减法规则：<em>P-Q=P+(-Q)</em> 。</p><p>3、异点相加：对不同且不互逆的点<em>P</em>（<em>x</em>，<em>y</em>）与<em>Q</em>（<em>a</em>，<em>b</em>），即<em>x</em>≠<em>a</em>，Ep（<em>a</em>，<em>b</em>）则：<em>P(x , y)+Q(c , d)=S(i , j)</em></p><p>其中：</p><p><img src="2.png"></p><p>4、倍点原则：对于一个点<em>P</em>（<em>x</em>，<em>y</em>），若<em>P</em>≠-<em>P</em>，即<em>y</em>≠0，Ep（<em>a</em>，<em>b</em>）则有：</p><p><em>P(x,y)+P(x,y)=2P(x,y)=S(i.j)</em></p><p>其中：</p><p><img src="3.png"></p><p>并不是所有的点都可以求倍点，同样也不是所有的点都可以用来建立椭圆曲线系统，所以就引入了有限域椭圆曲线点的阶。</p><p>设<em>P</em>是椭圆Ep（<em>a</em>，<em>b</em>）上的点，若存在最小的正整数<em>n</em>使得：<em>nP=O</em>（O是无穷远的点）则称<em>n</em>为<em>P</em>的阶，若<em>n</em>不存在，则称<em>P</em>是无限阶的。</p><p>若一个群<em>G</em>的每一个元都是<em>G</em>的某一个固定元<em>a</em>的乘方，则称<em>G</em>为循环群记为：</p><p><img src="4.png"></p><p><em>a</em>称为<em>G</em>的一个生成元。</p><p>在某些条件下，椭圆曲线上所有的点构成一个循环群，并且一定存在一个本原元，它的幂值生成了整个群（这就是离散对数问题）。</p><p>给定一个椭圆曲线E，确定本原元<em>P</em>和一个元素<em>T</em>，那么离散对数问题就是找到整数<em>D</em>，满足：<em>P+P+P+….+P=DP=T</em></p><p>在密码体制中，D通常为整数，也是私钥，曲线上的点T是公钥。</p><p>至此，椭圆曲线的原理基本以阐述完毕，总结如下：</p><p>椭圆曲线Ep（<em>a</em>，<em>b</em>）上的点<em>G</em>，<em>n</em>为<em>G</em>的阶*(nG=O∞)<em>，</em>d<em>为小于</em>n<em>的整数。考虑方程：</em>P=dG*</p><p>其中<em>P,G</em>属于<em>E</em>，<em>d</em>为整数。</p><p>由<em>d</em>，<em>G</em>计算<em>P</em>很容易，而有<em>P</em>,<em>G</em>求<em>d</em>计算上是不可行的。</p><p>这就是椭圆曲线密码体制安全的基础，又叫做椭圆曲线的离散对数问题。</p><p>其中点<em>G</em>为基点，<em>d</em>（<em>d</em>&lt;<em>n</em>）为私有密钥，<em>P</em>为公开密钥。</p><h1 id="程序设计"><a href="#程序设计" class="headerlink" title="程序设计"></a>程序设计</h1><p>取一素数<em>p</em>，两个参数<em>a</em>，<em>b</em>，得到Ep（<em>a</em>，<em>b</em>）。</p><p>利用公式验证所得曲线为可用曲线，判断公式：</p><p><img src="1.png"></p><p>画出椭圆曲线的图，得知隐函数的情况下调用ezplot画出椭圆曲线的图。</p><p>画出曲线的散点图，计算方法与公式如下：</p><p>计算<em>x</em>=0至*x=(p-1)*中，计算：</p><p><img src="5.png"></p><p>其中若能求的整数平方根的数则为有效点，同时计算出:</p><p><img src="6.png"></p><p><img src="7.png"></p><p>取基点<em>G</em>，由<em>G</em>计算出曲线的阶<em>n</em>，计算公式为：*(n-1)G=-G*</p><p>写出-<em>G</em>的计算公式：*-G(x ,z)=G(x ,-1y)mod p = G(x ,p-y)*</p><p>选取私有密钥<em>key</em>（<em>key</em>&lt;<em>n</em>），计算公开密钥<em>K=keyG</em></p><p>有了上述内容，可以着手设计加密解密步骤了。</p><p>加密步骤：输入一个随机数<em>r</em>（<em>r</em>&lt;<em>n</em>）作为加密方的私钥，利用输入的随机数生成点:</p><p><img src="8.png"></p><p> G_r为加密方的公钥，用到的公式如下：</p><p><img src="9.png"></p><p>K_r为共享密钥，计算公示如下：</p><p><img src="10.png"></p><p>将明文转化为密文，利用K_r的x轴坐标作为加密密钥，公式如下：</p><p><img src="11.png"></p><p>解密步骤：利用加密方传回的密文<em>C</em>和G_r求解<em>M</em>，在知道  和己方私钥的情况下求解<em>M</em>是十分容易的，先解出共享密钥K_r，利用其x轴坐标用简单的公式：</p><p><img src="12.png"></p><p>最终得到想要的明文<em>M</em>。</p><p>思维导图如下：</p><p><img src="13.png"></p><h1 id="运行结果演示"><a href="#运行结果演示" class="headerlink" title="运行结果演示"></a>运行结果演示</h1><p>代码见附录，这里只演示。</p><p>请输入a的值：10</p><p>请输入b的值：5</p><p>请输入p的值：23</p><p>请确曲线：1确认，0退出</p><p>1</p><p><img src="14.png"></p><p>椭圆曲线的散列图为：</p><p>22 - - - - - - - - - - 1 - - - - - - - - - - - - </p><p>21 - - - - - - - 1 - - - - - - - - - - - - - - - </p><p>20 - - - - - - - - - - - - - 1 - - - - - - - - - </p><p>19 - 1 - 1 - - - - - - - - - - - - - - - 1 - - - </p><p>18 - - - - - - - - - - - - - - - - - - - - - - - </p><p>17 - - - - - - - - - - - - 1 - - - - - - - - - - </p><p>16 - - - - - - - - - - - - - - - - - - - - - - - </p><p>15 - - - - - - - - - - - - - - - - - - - - - - - </p><p>14 - - - - - - - - - - - - - - - - - - - - - - - </p><p>13 - - - - - - - - - - - - - - - - - - - - - - - </p><p>12 - - - - - - - - - - - - - - - - 1 - - - - - - </p><p>11 - - - - - - - - - - - - - - - - 1 - - - - - - </p><p>10 - - - - - - - - - - - -  - - - - - - - - - - - </p><p>9 - - - - - - - - - - - - - - - - - - - - - - - </p><p>8 - - - - - - - - - - - - - - - - - - - - - - - </p><p>7 - - - - - - - - - - - - - - - - - - - - - - - </p><p>6  - - - - - - - - - - - - 1 - - - - - - - - - - </p><p>5 - - - - - - - - - - - - - - - - - - - - - - - </p><p>4 - 1 - 1 - - - - - - - - - - - - - - - 1 - - - </p><p>3 - - - - - - - - - - - - - 1 - - - - - - - - - </p><p>2 - - - - - - - 1 - - - - - - - - - - - - - - - </p><p>1 - - - - - - - - - - 1 - - - - - - - - - - - - </p><p>0 - - - - - - - - - - - - - - - - - - - - - 1 - </p><p>0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22</p><p>1：在如上坐标系中选一个值为G的坐标</p><p>1：请输入选取的x坐标值：10</p><p>1：请输入选取的y坐标值：1</p><p>1：请输入私钥小key（&lt;9）：8</p><p>2：请输入一个整数k（&lt;9）用于求kG和kQ：7</p><p>2：请输入需要加密的字符串:ECC加密算法</p><p>密文为：(16,11),1104-(16,11),1072-(16,11),1072-(16,11),338432-(16,11),375904-(16,11),506224-(16,11),445776-</p><p>1解密得到明文：ECC加密算法</p><p>结束</p><h1 id="ECC加密算法的优点"><a href="#ECC加密算法的优点" class="headerlink" title="ECC加密算法的优点"></a>ECC加密算法的优点</h1><p>1、安全性高：攻击有限域上的离散对数问题可以使用指数积分法，其运算的复杂度</p><p><img src="15.png"></p><p>其中<em>p</em>是模数（为素数）。而它对于椭圆曲线上的离散对数问题并不有效。目前攻击椭圆曲线上离散对数问题的方法只有适合攻击任何循环群上离散对数问题的大步小步法，其运算复杂度为：</p><p><img src="16.png"></p><p>其中<em>P_max</em>是椭圆曲线所形成的Abel群的阶的最大因子。因此，椭圆曲线密码体制比基于有限域上的离散对数问题的公钥体制更加安全</p><p>2、密钥量小：由攻击两者的算法复杂度可知，在实现相同的安全性能条件下，椭圆曲线密码体制所需的密钥量远比基于有限域上的离散对数问题的公钥体制的密钥量小</p><p>3、灵活性好：有限域GF(q)一定情况下，其上的循环群(即GF(q)-{0})就定了。而GF(q)上的椭圆曲线可以通过改变曲线参数，得到不同的曲线，形成不同的循环群。因此，椭圆曲线具有丰富的群结构和多选择性。</p><p>正是由于椭圆曲线具有丰富的群结构和多种选择性，并可在保持和RSA/DSA体制同样安全性能的前提下，大大缩短了密钥长度(目前160比特足以保证安全性)，因而在密码领域有着广阔的引用前景。下表给出了椭圆曲线密码体制和RSA/DSA体制在保持同等安全的条件下各自所需的密钥长度。</p><p><img src="17.png"></p><h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><pre class=" language-python"><code class="language-python"><span class="token number">1</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">#-*- codeing = utf-8 -*-  </span><span class="token number">2</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">#@Time : 2020/2/24 11:46  </span><span class="token number">3</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">#@Author : Friats  </span><span class="token number">4</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">#@File : ECC.py  </span><span class="token number">5</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">#@Software : PyCharm  </span><span class="token number">6</span><span class="token punctuation">.</span>    <span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> mp  <span class="token number">7</span><span class="token punctuation">.</span>    <span class="token keyword">from</span> sympy<span class="token punctuation">.</span>parsing<span class="token punctuation">.</span>sympy_parser <span class="token keyword">import</span> parse_expr  <span class="token number">8</span><span class="token punctuation">.</span>    <span class="token keyword">from</span> sympy <span class="token keyword">import</span> plot_implicit  <span class="token number">9</span><span class="token punctuation">.</span>      <span class="token number">10</span><span class="token punctuation">.</span>    <span class="token triple-quoted-string string">""" 11.    变量定义如下 12.    a:椭圆曲线参数a 13.    b:椭圆曲线参数b 14.    p:椭圆曲线参数p 15.    n:曲线的阶n 16.    G_x:基点G的x轴坐标 17.    G_y:基点G的y轴坐标 18.    KEY_x:解密方公钥x轴坐标 19.    KEY_y:解密方公钥y轴坐标 20.    key:解密方私钥 21.    K_G_x:加密方公钥x轴坐标 22.    K_G_y:加密方公钥y轴坐标 23.    K_Q_x:共享密钥x轴坐标 24.    K_Q_y:共享密钥y轴坐标 25.    """</span>  <span class="token number">26</span><span class="token punctuation">.</span>    <span class="token triple-quoted-string string">""" 27.    函数定义如下 28.    get_inverse(): 取逆元 29.    get_gcd():     取最大公约数 30.    get_np():      求解公式Q=np 31.    get_rank():    求曲线的阶n 32.    get_param():   计算p和-p 33.    get_graph():   求解并计算散点图 34.    get_ng():      计算nG 35.    """</span>  <span class="token number">36</span><span class="token punctuation">.</span>      <span class="token number">37</span><span class="token punctuation">.</span>    <span class="token keyword">def</span> <span class="token function">get_inverse</span><span class="token punctuation">(</span>mu<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token number">38</span><span class="token punctuation">.</span>        <span class="token triple-quoted-string string">""" 39.        取逆元 40.        :param mu: 输入参数1 41.        :param p: 曲线的参数p 42.        :return: 参数1的逆元，-1逆元不存在 43.        """</span>  <span class="token number">44</span><span class="token punctuation">.</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token number">45</span><span class="token punctuation">.</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token operator">*</span>mu<span class="token punctuation">)</span><span class="token operator">%</span>p <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>  <span class="token number">46</span><span class="token punctuation">.</span>                <span class="token keyword">return</span> i  <span class="token number">47</span><span class="token punctuation">.</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>  <span class="token number">48</span><span class="token punctuation">.</span>      <span class="token number">49</span><span class="token punctuation">.</span>    <span class="token keyword">def</span> <span class="token function">get_gcd</span><span class="token punctuation">(</span>zi<span class="token punctuation">,</span> mu<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token number">50</span><span class="token punctuation">.</span>        <span class="token triple-quoted-string string">""" 51.        用递归求出最大公约数 52.        :param zi: 输入参数1 53.        :param mu: 输入参数2 54.        :return: 最大公约数 55.        """</span>  <span class="token number">56</span><span class="token punctuation">.</span>        <span class="token keyword">if</span> mu<span class="token punctuation">:</span>  <span class="token number">57</span><span class="token punctuation">.</span>            <span class="token keyword">return</span> get_gcd<span class="token punctuation">(</span>mu<span class="token punctuation">,</span> zi<span class="token operator">%</span>mu<span class="token punctuation">)</span>  <span class="token number">58</span><span class="token punctuation">.</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>  <span class="token number">59</span><span class="token punctuation">.</span>            <span class="token keyword">return</span> zi  <span class="token number">60</span><span class="token punctuation">.</span>      <span class="token number">61</span><span class="token punctuation">.</span>      <span class="token number">62</span><span class="token punctuation">.</span>    <span class="token keyword">def</span> <span class="token function">get_np</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span> y1<span class="token punctuation">,</span> x2<span class="token punctuation">,</span> y2<span class="token punctuation">,</span> a<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token number">63</span><span class="token punctuation">.</span>        <span class="token triple-quoted-string string">""" 64.        求解公式Q=np 65.        :param x1: 点1的x轴坐标 66.        :param y1: 点1的y轴坐标 67.        :param x2: 点2的x轴坐标 68.        :param y2: 点2的y轴坐标 69.        :param a: 曲线参数a 70.        :param p: 曲线参数p 71.        :return: 返回Q的坐标 72.        """</span>  <span class="token number">73</span><span class="token punctuation">.</span>        flag <span class="token operator">=</span> <span class="token number">1</span>  <span class="token comment" spellcheck="true"># 定义符号位（+/-）  </span><span class="token number">74</span><span class="token punctuation">.</span>      <span class="token number">75</span><span class="token punctuation">.</span>        <span class="token comment" spellcheck="true"># 如果 p=q  k=(3x2+a)/2y1mod p  </span><span class="token number">76</span><span class="token punctuation">.</span>        <span class="token keyword">if</span> x1 <span class="token operator">==</span> x2 <span class="token operator">and</span> y1 <span class="token operator">==</span> y2<span class="token punctuation">:</span>  <span class="token number">77</span><span class="token punctuation">.</span>            zi <span class="token operator">=</span> <span class="token number">3</span> <span class="token operator">*</span> <span class="token punctuation">(</span>x1 <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> a  <span class="token comment" spellcheck="true"># 计算分子      【求导】  </span><span class="token number">78</span><span class="token punctuation">.</span>            mu <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> y1    <span class="token comment" spellcheck="true"># 计算分母  </span><span class="token number">79</span><span class="token punctuation">.</span>      <span class="token number">80</span><span class="token punctuation">.</span>        <span class="token comment" spellcheck="true"># 若P≠Q，则k=(y2-y1)/(x2-x1) mod p  </span><span class="token number">81</span><span class="token punctuation">.</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>  <span class="token number">82</span><span class="token punctuation">.</span>            zi <span class="token operator">=</span> y2 <span class="token operator">-</span> y1  <span class="token number">83</span><span class="token punctuation">.</span>            mu <span class="token operator">=</span> x2 <span class="token operator">-</span> x1  <span class="token number">84</span><span class="token punctuation">.</span>            <span class="token keyword">if</span> zi<span class="token operator">*</span> mu <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>  <span class="token number">85</span><span class="token punctuation">.</span>                flag <span class="token operator">=</span> <span class="token number">0</span>        <span class="token comment" spellcheck="true"># 符号0为-（负数）  </span><span class="token number">86</span><span class="token punctuation">.</span>                zi <span class="token operator">=</span> abs<span class="token punctuation">(</span>zi<span class="token punctuation">)</span>  <span class="token number">87</span><span class="token punctuation">.</span>                mu <span class="token operator">=</span> abs<span class="token punctuation">(</span>mu<span class="token punctuation">)</span>  <span class="token number">88</span><span class="token punctuation">.</span>      <span class="token number">89</span><span class="token punctuation">.</span>        <span class="token comment" spellcheck="true"># 将分子和分母化为最简  </span><span class="token number">90</span><span class="token punctuation">.</span>        gcd_value <span class="token operator">=</span> get_gcd<span class="token punctuation">(</span>zi<span class="token punctuation">,</span> mu<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 最大公約數  </span><span class="token number">91</span><span class="token punctuation">.</span>        zi <span class="token operator">=</span> zi <span class="token operator">//</span> gcd_value            <span class="token comment" spellcheck="true"># 整除  </span><span class="token number">92</span><span class="token punctuation">.</span>        mu <span class="token operator">=</span> mu <span class="token operator">//</span> gcd_value  <span class="token number">93</span><span class="token punctuation">.</span>        <span class="token comment" spellcheck="true"># 求分母的逆元  逆元： ∀a ∈G ，ョb∈G 使得 ab = ba = e  </span><span class="token number">94</span><span class="token punctuation">.</span>        <span class="token comment" spellcheck="true"># P(x,y)的负元是 (x,-y mod p)= (x,p-y) ，有P+(-P)= O∞  </span><span class="token number">95</span><span class="token punctuation">.</span>        inverse_value <span class="token operator">=</span> get_inverse<span class="token punctuation">(</span>mu<span class="token punctuation">,</span> p<span class="token punctuation">)</span>  <span class="token number">96</span><span class="token punctuation">.</span>        k <span class="token operator">=</span> <span class="token punctuation">(</span>zi <span class="token operator">*</span> inverse_value<span class="token punctuation">)</span>  <span class="token number">97</span><span class="token punctuation">.</span>      <span class="token number">98</span><span class="token punctuation">.</span>        <span class="token keyword">if</span> flag <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                   <span class="token comment" spellcheck="true"># 斜率负数 flag==0  </span><span class="token number">99</span><span class="token punctuation">.</span>            k <span class="token operator">=</span> <span class="token operator">-</span>k  <span class="token number">100</span><span class="token punctuation">.</span>        k <span class="token operator">=</span> k <span class="token operator">%</span> p  <span class="token number">101</span><span class="token punctuation">.</span>        <span class="token comment" spellcheck="true"># 计算x3,y3 P+Q  </span><span class="token number">102</span><span class="token punctuation">.</span>        <span class="token triple-quoted-string string">""" 103.            x3≡k2-x1-x2(mod p) 104.            y3≡k(x1-x3)-y1(mod p) 105.        """</span>  <span class="token number">106</span><span class="token punctuation">.</span>        x3 <span class="token operator">=</span> <span class="token punctuation">(</span>k <span class="token operator">**</span> <span class="token number">2</span> <span class="token operator">-</span> x1 <span class="token operator">-</span> x2<span class="token punctuation">)</span> <span class="token operator">%</span> p  <span class="token number">107</span><span class="token punctuation">.</span>        y3 <span class="token operator">=</span> <span class="token punctuation">(</span>k <span class="token operator">*</span> <span class="token punctuation">(</span>x1 <span class="token operator">-</span> x3<span class="token punctuation">)</span> <span class="token operator">-</span> y1<span class="token punctuation">)</span> <span class="token operator">%</span> p  <span class="token number">108</span><span class="token punctuation">.</span>        <span class="token keyword">return</span> x3<span class="token punctuation">,</span>y3  <span class="token number">109</span><span class="token punctuation">.</span>      <span class="token number">110</span><span class="token punctuation">.</span>    <span class="token keyword">def</span> <span class="token function">get_rank</span><span class="token punctuation">(</span>x0<span class="token punctuation">,</span> y0<span class="token punctuation">,</span> a<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token number">111</span><span class="token punctuation">.</span>        <span class="token triple-quoted-string string">""" 112.        计算曲线的阶n 113.        :param x0: 输入点的x轴坐标 114.        :param y0: 输入点的y轴坐标 115.        :param a: 曲线参数a 116.        :param p: 曲线参数p 117.        :return: 曲线的阶n 118.        """</span>  <span class="token number">119</span><span class="token punctuation">.</span>        x1 <span class="token operator">=</span> x0             <span class="token comment" spellcheck="true">#-p的x坐标  </span><span class="token number">120</span><span class="token punctuation">.</span>        y1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">*</span>y0<span class="token punctuation">)</span><span class="token operator">%</span>p      <span class="token comment" spellcheck="true">#-p的y坐标  </span><span class="token number">121</span><span class="token punctuation">.</span>        tempX <span class="token operator">=</span> x0  <span class="token number">122</span><span class="token punctuation">.</span>        tempY <span class="token operator">=</span> y0  <span class="token number">123</span><span class="token punctuation">.</span>        n <span class="token operator">=</span> <span class="token number">1</span>  <span class="token number">124</span><span class="token punctuation">.</span>        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>  <span class="token number">125</span><span class="token punctuation">.</span>            n <span class="token operator">+=</span> <span class="token number">1</span>  <span class="token number">126</span><span class="token punctuation">.</span>            <span class="token comment" spellcheck="true">#         # 求p+q的和，得到n*p，直到求出阶  </span><span class="token number">127</span><span class="token punctuation">.</span>            p_x<span class="token punctuation">,</span>p_y <span class="token operator">=</span> get_np<span class="token punctuation">(</span>tempX<span class="token punctuation">,</span> tempY<span class="token punctuation">,</span> x0<span class="token punctuation">,</span> y0<span class="token punctuation">,</span> a<span class="token punctuation">,</span> p<span class="token punctuation">)</span>  <span class="token number">128</span><span class="token punctuation">.</span>            <span class="token comment" spellcheck="true"># 如果 == -p,那么阶数+1，返回  </span><span class="token number">129</span><span class="token punctuation">.</span>            <span class="token keyword">if</span> p_x <span class="token operator">==</span> x1 <span class="token operator">and</span> p_y <span class="token operator">==</span> y1<span class="token punctuation">:</span>  <span class="token number">130</span><span class="token punctuation">.</span>                <span class="token keyword">return</span> n<span class="token operator">+</span><span class="token number">1</span>  <span class="token number">131</span><span class="token punctuation">.</span>            tempX <span class="token operator">=</span> p_x  <span class="token number">132</span><span class="token punctuation">.</span>            tempY <span class="token operator">=</span> p_y  <span class="token number">133</span><span class="token punctuation">.</span>      <span class="token number">134</span><span class="token punctuation">.</span>      <span class="token number">135</span><span class="token punctuation">.</span>    <span class="token keyword">def</span> <span class="token function">get_param</span><span class="token punctuation">(</span>x0<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token number">136</span><span class="token punctuation">.</span>        <span class="token triple-quoted-string string">""" 137.        计算P和-P 138.        :param x0:点的x轴坐标 139.        :param a:曲线参数a 140.        :param b:曲线参数b 141.        :param p:曲线参数p 142.        :return:点P和-P 143.        """</span>  <span class="token number">144</span><span class="token punctuation">.</span>        y0 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>  <span class="token number">145</span><span class="token punctuation">.</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token number">146</span><span class="token punctuation">.</span>            <span class="token comment" spellcheck="true"># 满足取模约束条件，椭圆曲线Ep(a,b)，p为质数，x,y∈[0,p-1]  </span><span class="token number">147</span><span class="token punctuation">.</span>            <span class="token keyword">if</span> i<span class="token operator">**</span><span class="token number">2</span><span class="token operator">%</span>p <span class="token operator">==</span> <span class="token punctuation">(</span>x0<span class="token operator">**</span><span class="token number">3</span> <span class="token operator">+</span> a<span class="token operator">*</span>x0 <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token operator">%</span>p<span class="token punctuation">:</span>  <span class="token number">148</span><span class="token punctuation">.</span>                y0 <span class="token operator">=</span> i  <span class="token number">149</span><span class="token punctuation">.</span>                <span class="token keyword">break</span>  <span class="token number">150</span><span class="token punctuation">.</span>      <span class="token number">151</span><span class="token punctuation">.</span>        <span class="token comment" spellcheck="true"># 如果y0没有，返回false  </span><span class="token number">152</span><span class="token punctuation">.</span>        <span class="token keyword">if</span> y0 <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>  <span class="token number">153</span><span class="token punctuation">.</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>  <span class="token number">154</span><span class="token punctuation">.</span>      <span class="token number">155</span><span class="token punctuation">.</span>        <span class="token comment" spellcheck="true"># 计算-y（负数取模）  </span><span class="token number">156</span><span class="token punctuation">.</span>        x1 <span class="token operator">=</span> x0  <span class="token number">157</span><span class="token punctuation">.</span>        y1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">*</span>y0<span class="token punctuation">)</span> <span class="token operator">%</span> p  <span class="token number">158</span><span class="token punctuation">.</span>        <span class="token keyword">return</span> x0<span class="token punctuation">,</span>y0<span class="token punctuation">,</span>x1<span class="token punctuation">,</span>y1  <span class="token number">159</span><span class="token punctuation">.</span>      <span class="token number">160</span><span class="token punctuation">.</span>    <span class="token keyword">def</span> <span class="token function">get_graph</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token number">161</span><span class="token punctuation">.</span>        <span class="token triple-quoted-string string">""" 162.        求解并计算散点图 163.        :param a: 曲线参数a 164.        :param b: 曲线参数b 165.        :param p: 曲线参数p 166.        :return: 返回一个二维数组并打印，大小[p][p] 167.        """</span>  <span class="token number">168</span><span class="token punctuation">.</span>        x_y <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token number">169</span><span class="token punctuation">.</span>        <span class="token comment" spellcheck="true"># 初始化二维数组，将所有的数组元素用-填充  </span><span class="token number">170</span><span class="token punctuation">.</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token number">171</span><span class="token punctuation">.</span>            x_y<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'-'</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token number">172</span><span class="token punctuation">.</span>      <span class="token number">173</span><span class="token punctuation">.</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token number">174</span><span class="token punctuation">.</span>            val <span class="token operator">=</span>get_param<span class="token punctuation">(</span>i<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> p<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 椭圆曲线上的点  </span><span class="token number">175</span><span class="token punctuation">.</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>val <span class="token operator">!=</span> <span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token number">176</span><span class="token punctuation">.</span>                x0<span class="token punctuation">,</span>y0<span class="token punctuation">,</span>x1<span class="token punctuation">,</span>y1 <span class="token operator">=</span> val  <span class="token number">177</span><span class="token punctuation">.</span>                x_y<span class="token punctuation">[</span>x0<span class="token punctuation">]</span><span class="token punctuation">[</span>y0<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>  <span class="token number">178</span><span class="token punctuation">.</span>                x_y<span class="token punctuation">[</span>x1<span class="token punctuation">]</span><span class="token punctuation">[</span>y1<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>  <span class="token number">179</span><span class="token punctuation">.</span>      <span class="token number">180</span><span class="token punctuation">.</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"椭圆曲线的散列图为："</span><span class="token punctuation">)</span>  <span class="token number">181</span><span class="token punctuation">.</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">:</span>              <span class="token comment" spellcheck="true"># i= 0-> p-1  </span><span class="token number">182</span><span class="token punctuation">.</span>            temp <span class="token operator">=</span> p<span class="token number">-1</span><span class="token operator">-</span>i        <span class="token comment" spellcheck="true"># 倒序  </span><span class="token number">183</span><span class="token punctuation">.</span>      <span class="token number">184</span><span class="token punctuation">.</span>            <span class="token comment" spellcheck="true"># 格式化输出1/2位数，y坐标轴  </span><span class="token number">185</span><span class="token punctuation">.</span>            <span class="token keyword">if</span> temp <span class="token operator">>=</span> <span class="token number">10</span><span class="token punctuation">:</span>  <span class="token number">186</span><span class="token punctuation">.</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>temp<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">" "</span><span class="token punctuation">)</span>  <span class="token number">187</span><span class="token punctuation">.</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>  <span class="token number">188</span><span class="token punctuation">.</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>temp<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">"  "</span><span class="token punctuation">)</span>  <span class="token number">189</span><span class="token punctuation">.</span>      <span class="token number">190</span><span class="token punctuation">.</span>            <span class="token comment" spellcheck="true"># 输出具体坐标的值，一行  </span><span class="token number">191</span><span class="token punctuation">.</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token number">192</span><span class="token punctuation">.</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>x_y<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>temp<span class="token punctuation">]</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">"  "</span><span class="token punctuation">)</span>  <span class="token number">193</span><span class="token punctuation">.</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#换行  </span><span class="token number">194</span><span class="token punctuation">.</span>      <span class="token number">195</span><span class="token punctuation">.</span>        <span class="token comment" spellcheck="true"># 输出 x 坐标轴  </span><span class="token number">196</span><span class="token punctuation">.</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"  "</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span>  <span class="token number">197</span><span class="token punctuation">.</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token number">198</span><span class="token punctuation">.</span>            <span class="token keyword">if</span> i <span class="token operator">>=</span><span class="token number">10</span><span class="token punctuation">:</span>  <span class="token number">199</span><span class="token punctuation">.</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">" "</span><span class="token punctuation">)</span>  <span class="token number">200</span><span class="token punctuation">.</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>  <span class="token number">201</span><span class="token punctuation">.</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">"  "</span><span class="token punctuation">)</span>  <span class="token number">202</span><span class="token punctuation">.</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>  <span class="token number">203</span><span class="token punctuation">.</span>      <span class="token number">204</span><span class="token punctuation">.</span>    <span class="token keyword">def</span> <span class="token function">get_ng</span><span class="token punctuation">(</span>G_x<span class="token punctuation">,</span> G_y<span class="token punctuation">,</span> key<span class="token punctuation">,</span> a<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token number">205</span><span class="token punctuation">.</span>        <span class="token triple-quoted-string string">""" 206.        求解nG 207.        :param G_x: G的x轴坐标 208.        :param G_y: G的y轴坐标 209.        :param key: 解密方私钥 210.        :param a: 曲线参数a 211.        :param p: 曲线参数p 212.        :return: nG的坐标 213.        """</span>  <span class="token number">214</span><span class="token punctuation">.</span>        temp_x <span class="token operator">=</span> G_x  <span class="token number">215</span><span class="token punctuation">.</span>        temp_y <span class="token operator">=</span> G_y  <span class="token number">216</span><span class="token punctuation">.</span>        <span class="token keyword">while</span> key <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">:</span>  <span class="token number">217</span><span class="token punctuation">.</span>            temp_x<span class="token punctuation">,</span>temp_y <span class="token operator">=</span> get_np<span class="token punctuation">(</span>temp_x<span class="token punctuation">,</span>temp_y<span class="token punctuation">,</span> G_x<span class="token punctuation">,</span> G_y<span class="token punctuation">,</span> a<span class="token punctuation">,</span> p<span class="token punctuation">)</span>  <span class="token number">218</span><span class="token punctuation">.</span>            key <span class="token operator">-=</span> <span class="token number">1</span>  <span class="token number">219</span><span class="token punctuation">.</span>        <span class="token keyword">return</span> temp_x<span class="token punctuation">,</span>temp_y  <span class="token number">220</span><span class="token punctuation">.</span>      <span class="token number">221</span><span class="token punctuation">.</span>    <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token number">222</span><span class="token punctuation">.</span>        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>  <span class="token number">223</span><span class="token punctuation">.</span>            a <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">"请输入a的值："</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token number">224</span><span class="token punctuation">.</span>            b <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">"请输入b的值："</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token number">225</span><span class="token punctuation">.</span>            p <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">"请输入p的值："</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#用作模运算  </span><span class="token number">226</span><span class="token punctuation">.</span>            <span class="token comment" spellcheck="true"># 条件满足判断  </span><span class="token number">227</span><span class="token punctuation">.</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token operator">*</span><span class="token punctuation">(</span>a<span class="token operator">**</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">27</span><span class="token operator">*</span><span class="token punctuation">(</span>b<span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">%</span>p <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token number">228</span><span class="token punctuation">.</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"您输入的参数有误，请重新输入！！！\n"</span><span class="token punctuation">)</span>  <span class="token number">229</span><span class="token punctuation">.</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>  <span class="token number">230</span><span class="token punctuation">.</span>                <span class="token keyword">break</span>  <span class="token number">231</span><span class="token punctuation">.</span>        <span class="token comment" spellcheck="true">#利用隐函数画出椭圆曲线大致的图  </span><span class="token number">232</span><span class="token punctuation">.</span>        ezplot <span class="token operator">=</span> <span class="token keyword">lambda</span> expr<span class="token punctuation">:</span> plot_implicit<span class="token punctuation">(</span>parse_expr<span class="token punctuation">(</span>expr<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token number">233</span><span class="token punctuation">.</span>        ttte <span class="token operator">=</span><span class="token string">'x*x*x+x*'</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">+</span><span class="token string">'+'</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'-y*y'</span>  <span class="token number">234</span><span class="token punctuation">.</span>        ezplot<span class="token punctuation">(</span>ttte<span class="token punctuation">)</span>  <span class="token number">235</span><span class="token punctuation">.</span>        mp<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token number">236</span><span class="token punctuation">.</span>        <span class="token comment" spellcheck="true">#确认输入图谱  </span><span class="token number">237</span><span class="token punctuation">.</span>        tur <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">"请确曲线：1确认，0退出\n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token number">238</span><span class="token punctuation">.</span>        <span class="token keyword">if</span> tur <span class="token operator">!=</span><span class="token number">0</span> <span class="token punctuation">:</span>  <span class="token number">239</span><span class="token punctuation">.</span>            <span class="token comment" spellcheck="true"># 输出椭圆曲线散点图  </span><span class="token number">240</span><span class="token punctuation">.</span>            get_graph<span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> p<span class="token punctuation">)</span>  <span class="token number">241</span><span class="token punctuation">.</span>            <span class="token comment" spellcheck="true"># 选点作为G点  </span><span class="token number">242</span><span class="token punctuation">.</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"1：在如上坐标系中选一个值为G的坐标"</span><span class="token punctuation">)</span>  <span class="token number">243</span><span class="token punctuation">.</span>            G_x <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">"1：请输入选取的x坐标值："</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token number">244</span><span class="token punctuation">.</span>            G_y <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">"1：请输入选取的y坐标值："</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token number">245</span><span class="token punctuation">.</span>            <span class="token comment" spellcheck="true"># 获取椭圆曲线的阶  </span><span class="token number">246</span><span class="token punctuation">.</span>            n <span class="token operator">=</span> get_rank<span class="token punctuation">(</span>G_x<span class="token punctuation">,</span> G_y<span class="token punctuation">,</span> a<span class="token punctuation">,</span> p<span class="token punctuation">)</span>  <span class="token number">247</span><span class="token punctuation">.</span>            <span class="token comment" spellcheck="true"># user1生成私钥，小key  </span><span class="token number">248</span><span class="token punctuation">.</span>            key <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">"1：请输入私钥小key（&lt;&amp;#123;&amp;#125;）："</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token number">249</span><span class="token punctuation">.</span>            <span class="token comment" spellcheck="true"># user1生成公钥，大KEY  </span><span class="token number">250</span><span class="token punctuation">.</span>      <span class="token number">251</span><span class="token punctuation">.</span>      <span class="token number">252</span><span class="token punctuation">.</span>            KEY_x<span class="token punctuation">,</span> kEY_y <span class="token operator">=</span> get_ng<span class="token punctuation">(</span>G_x<span class="token punctuation">,</span> G_y<span class="token punctuation">,</span> key<span class="token punctuation">,</span> a<span class="token punctuation">,</span> p<span class="token punctuation">)</span>  <span class="token number">253</span><span class="token punctuation">.</span>      <span class="token number">254</span><span class="token punctuation">.</span>            <span class="token comment" spellcheck="true"># user2阶段  </span><span class="token number">255</span><span class="token punctuation">.</span>            <span class="token comment" spellcheck="true"># user2拿到user1的公钥KEY，Ep(a,b)阶n，加密需要加密的明文数据  </span><span class="token number">256</span><span class="token punctuation">.</span>            <span class="token comment" spellcheck="true"># 加密准备  </span><span class="token number">257</span><span class="token punctuation">.</span>            k <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">"2：请输入一个整数k（&lt;&amp;#123;&amp;#125;）用于求kG和kQ："</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token number">258</span><span class="token punctuation">.</span>            k_G_x<span class="token punctuation">,</span> k_G_y <span class="token operator">=</span> get_ng<span class="token punctuation">(</span>G_x<span class="token punctuation">,</span> G_y<span class="token punctuation">,</span> k<span class="token punctuation">,</span> a<span class="token punctuation">,</span> p<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># kG  </span><span class="token number">259</span><span class="token punctuation">.</span>            k_Q_x<span class="token punctuation">,</span> k_Q_y <span class="token operator">=</span> get_ng<span class="token punctuation">(</span>KEY_x<span class="token punctuation">,</span> kEY_y<span class="token punctuation">,</span> k<span class="token punctuation">,</span> a<span class="token punctuation">,</span> p<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># kQ  </span><span class="token number">260</span><span class="token punctuation">.</span>      <span class="token number">261</span><span class="token punctuation">.</span>            <span class="token comment" spellcheck="true"># 加密  </span><span class="token number">262</span><span class="token punctuation">.</span>            plain_text <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"2：请输入需要加密的字符串:"</span><span class="token punctuation">)</span>  <span class="token number">263</span><span class="token punctuation">.</span>            plain_text <span class="token operator">=</span> plain_text<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token number">264</span><span class="token punctuation">.</span>            <span class="token comment" spellcheck="true"># plain_text = int(input("user1：请输入需要加密的密文："))  </span><span class="token number">265</span><span class="token punctuation">.</span>            c <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token number">266</span><span class="token punctuation">.</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"密文为："</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span>  <span class="token number">267</span><span class="token punctuation">.</span>            <span class="token keyword">for</span> char <span class="token keyword">in</span> plain_text<span class="token punctuation">:</span>  <span class="token number">268</span><span class="token punctuation">.</span>                intchar <span class="token operator">=</span> ord<span class="token punctuation">(</span>char<span class="token punctuation">)</span>  <span class="token number">269</span><span class="token punctuation">.</span>                cipher_text <span class="token operator">=</span> intchar <span class="token operator">*</span> k_Q_x  <span class="token number">270</span><span class="token punctuation">.</span>                c<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>k_G_x<span class="token punctuation">,</span> k_G_y<span class="token punctuation">,</span> cipher_text<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token number">271</span><span class="token punctuation">.</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"(&amp;#123;&amp;#125;,&amp;#123;&amp;#125;),&amp;#123;&amp;#125;"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>k_G_x<span class="token punctuation">,</span> k_G_y<span class="token punctuation">,</span> cipher_text<span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">"-"</span><span class="token punctuation">)</span>  <span class="token number">272</span><span class="token punctuation">.</span>      <span class="token number">273</span><span class="token punctuation">.</span>            <span class="token comment" spellcheck="true"># user1阶段  </span><span class="token number">274</span><span class="token punctuation">.</span>            <span class="token comment" spellcheck="true"># 拿到user2加密的数据进行解密  </span><span class="token number">275</span><span class="token punctuation">.</span>            <span class="token comment" spellcheck="true"># 知道 k_G_x,k_G_y，key情况下，求解k_Q_x,k_Q_y是容易的，然后plain_text = cipher_text/k_Q_x  </span><span class="token number">276</span><span class="token punctuation">.</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\n1解密得到明文："</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span>  <span class="token number">277</span><span class="token punctuation">.</span>            <span class="token keyword">for</span> charArr <span class="token keyword">in</span> c<span class="token punctuation">:</span>  <span class="token number">278</span><span class="token punctuation">.</span>                decrypto_text_x<span class="token punctuation">,</span> decrypto_text_y <span class="token operator">=</span> get_ng<span class="token punctuation">(</span>charArr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> charArr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> a<span class="token punctuation">,</span> p<span class="token punctuation">)</span>  <span class="token number">279</span><span class="token punctuation">.</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>chr<span class="token punctuation">(</span>charArr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">//</span> decrypto_text_x<span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span>  <span class="token number">280</span><span class="token punctuation">.</span>      <span class="token number">281</span><span class="token punctuation">.</span>    <span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>  <span class="token number">282</span><span class="token punctuation">.</span>        <span class="token comment" spellcheck="true">#调用函数,作为程序的入口,自定义程序运行顺序  </span><span class="token number">283</span><span class="token punctuation">.</span>        main<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token number">284</span><span class="token punctuation">.</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\n结束"</span><span class="token punctuation">)</span> </code></pre><p>以上便是本文所有内容了，如果喜欢请收藏本站</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> ECC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 加密算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kalma Filter学习笔记</title>
      <link href="/blog/2020/02/20/kalma-filter/"/>
      <url>/blog/2020/02/20/kalma-filter/</url>
      
        <content type="html"><![CDATA[<h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1 前言"></a>1 前言</h1><p>Kalma Filter应用十分广泛，比如导航中</p><p>为什么要使用Kalma Filter呢？</p><p>因为我们生活中的系统存在许多不确定性：</p><ul><li>并不存在完美的数学模型</li><li>大部分的系统模型不可控，也很难建模</li><li>测量传感器自身存在误差</li></ul><p>如何来理解Kalma Filter呢？</p><p><img src="0.jpg" alt="举个栗子！"></p><p>让一个人去测量一枚硬币的大小，测量结果为Z_k</p><p>k意味第k次测量</p><p>假设测量结果为</p><p>Z_1 = 50.2mm</p><p>Z_2 = 50.1mm</p><p>Z_3 = 50.4mm</p><p>….</p><p>这时我们想要知道硬币真实的数据，只需要把所有数据加起来取平均值就可以了，公式如下，我们将他处理一下：</p><p><img src="1.png"></p><p>这里我们可以知道，当k越大，1/k越趋近于0</p><p><img src="2.png"></p><p>也就是说，当k足够大的时候，后续的测试结果就不那么重要了</p><p>我们继续处理这个式子变成如下：</p><p><img src="3.png" alt="①式"></p><p>我们来这么理解：</p><p>当前的估计值 = 上一次的估计值 + 系数 * （当前测量值 - 上一次的估计值）</p><p>而这个系数K就是卡尔曼增益（因数）</p><p>从这个式子里我们可以看到，新的估计值只与上一次的估计只有关，上一次的估计值又只与上上一次的估计值有关，这是一种递归</p><p>在卡尔曼中，你不需要很久以前的数据，只需要上一次的就足够了</p><p>这里我们引入一个新的概念：</p><p>估计误差：E_est  </p><p>测量误差：E_mea</p><p>E：Error</p><p>est：Estimate</p><p>mea：Measurement</p><p>而K就等于：</p><p><img src="4.png"></p><p>在k时刻，当E_est_k-1 &gt;&gt;  E_mea_k 时：K→1，①式变为：</p><p><img src="5.png"></p><p>意味当k-1时的估计误差远大于第k次的测量误差，那么我们的估计值X_k就很趋近于测量值Z_k</p><p>同样，在k时刻，当E_est_k-1 &lt;&lt;  E_mea_k 时：K→0，①式变为：</p><p><img src="6.png"></p><p>意味当我们的估计误差足够大的时候，我们选择更相信测量值</p><p>有了上面这些东西，我们就可以着手这个简单的问题了</p><ul><li>计算：<img src="4.png"></li><li>计算：<img src="7.png"></li><li>更新：<img src="8.png"></li></ul><p>有了这三个公式，让我们来试试下面这个问题：</p><p>有一个条度为<del>50mm</del>的线，我们想要知道它的确切长度，但幸运的是你的<del>测量误差</del>尺子十分的理想，你觉得它的误差为3mm，但不幸运的是你的<del>估计误差</del>估计很不准，有5mm的误差，这时我们想要知道这条线到底有多长，我们需要结合两个测量</p><p>假设我们得出了以下数据：</p><ul><li>第一次的估计值=40mm</li><li>估计误差5mm</li><li>第一次的测量值=51mm</li><li>测量误差3mm</li></ul><p>我们可以借助三个公式用Excel表格进行计算，数据输出如下：</p><p><img src="9.png"></p><p>将公式输入Excel表格并求解画出图像</p><p><img src="10.png"></p><p>可以看到当我们进行五次迭代以后，数据已经非常接近真实值，至此，前言结束，Excal公式如下，想动手的朋友可以自己去试试：</p><ul><li>计算部分从第三行开始，所以这里直接放公式</li><li>D3=D2+E3*(B3-D2)</li><li>E3=F2/(F2+C3)</li><li>F3=(1-E3)*F2</li></ul><h1 id="2-进阶部分"><a href="#2-进阶部分" class="headerlink" title="2 进阶部分"></a>2 进阶部分</h1><p>通过上述栗子我们可以大致了解到Kalman Filter基本思想，但也许有人会说上面的例子里直接数据求算数平均不是更快么？</p><p>确实，在一些比较普通的系统中，Kalman Filter的作用并没有那么明显，但在一些复杂系统中，Kalman Filter能发挥出更大的优势</p><p>回归正题，我们来看下面一个栗子<del>（数据融合）</del>：</p><p>如果我们想要知道一个物体的真实重量，那么我们最简单的办法就是找个秤称一下，但是如果一个称不准呢，那么我们可以再找一个秤，得到两个数据以及两个秤的标准差：</p><ul><li>Z_1 = 30g</li><li>Z_2 = 32g</li><li>σ_1 = 2g</li><li>σ_2 = 3g</li></ul><p><img src="11.png" alt="一个标准的正态分布图"></p><p>两个正态分布图会有交叉的部分，而如果我们想要知道真实的数据，那么这个真实的数据将会落在交叉的部分，并且会更靠近σ_1那部分</p><p><img src="12.png" alt="大概就是这个样子，画的不好见谅"></p><p>由此，我们写出一个公式估计真实值Z：</p><p><img src="13.png"></p><p>K依然是卡尔曼增益，在这里，我们需要求解K，使得方差最小</p><p><img src="14.png"></p><p>由方差的性质可以将这两个分开</p><p><img src="15.png"></p><p>将σ_1 =2g和 σ_2=3g带入</p><p>可以得到K=0.2</p><p>带入公式：</p><p><img src="13.png"></p><p>得出最优估计值Z=30.4g</p><p>可以计算出它的σ = 1.79</p><p>再来看一个例子<del>（协方差矩阵）方差协方差在一个矩阵中表现出来</del>：</p><p><img src="16.png"></p><hr><p>状态空间表达：</p><p><img src="17.png"></p><p>一个简单的栗子，弹簧系统的栗子，F是力，x位移，k弹性系数，B阻尼系数，m质量</p><p>得出方程：</p><p><img src="18.png"></p><p>将上面的公式用矩阵来表示：</p><p><img src="19.png"></p><p>我们可以将其归纳为：</p><p><img src="20.png"></p><p>这里的是连续形式，X(t)随时间变化</p><p>而我们也可以把它写成离散形式：</p><p><img src="21.png"></p><p>这里的下标k、k-1、k+1等都是时间单位</p><p>但现实世界中存在许多不确定性，我们现有的模型不能很好的反应实际情况，所以我们的模型需要改变一下：</p><p><img src="22.png"></p><p>这里的w_k-1和v_k分别代表过程噪音和测量噪音</p><p>一式计算结果</p><p>二试测量结果</p><p>这就是状态空间方程</p><hr><p>虽然过程噪声不可测量，但是我们可以用正态分布来表示</p><ul><li><p>P(w)~(0,Q)0期望，Q协方差矩阵</p></li><li><p>Q=E[w,w^T]</p></li><li><p><img src="23.png"></p></li></ul><p>同理，P(v)~(0,R)0期望，R协方差矩阵，推理过程一样，这里就不写了</p><hr><p>用数据融合的思想来处理一下我们的公式</p><p>先验：</p><p><img src="35.png"></p><p>后验：</p><p><img src="24.png"></p><p>X-_k为先验估计，K与误差大小息息相关K属于[0,H-]，为了量化误差，我们引入E_k</p><p><img src="25.png"></p><p>这里的x_k是真实值，X_k是估计值，化简的出：</p><p><img src="26.png"></p><p>将结果带入原式：</p><p><img src="27.png"></p><p><img src="28.png"></p><p>当测量结果误差小的时候，K_k=H-，当测量误差很大的时候，K_k=0，至此我们已经推导出卡尔曼增益系数K</p><hr><p><img src="29.png"></p><p><img src="30.png"></p><p>有了这个式子，我们就可利用卡尔曼滤波器来预测状态变量的值了</p><p>如此一来，我们总结一下我们所得到的式子将上面的X均带上帽子：</p><p><img src="31.png"></p><p><img src="32.png"></p><p>这就是卡尔曼滤波器的全部五个公式了</p><h1 id="3-示例"><a href="#3-示例" class="headerlink" title="3 示例"></a>3 示例</h1><p><img src="33.png"></p><p><img src="34.png"></p><p>大家可以自行使用这个例子代入合适的数据去计算结果，其中除手写部分均为Math Type输入截图，总结不易希望大家喜欢。</p><p>参考：<a href="https://www.bilibili.com/video/BV1ez4y1X7eR/?spm_id_from=333.788.videocard.2">https://www.bilibili.com/video/BV1ez4y1X7eR/?spm_id_from=333.788.videocard.2</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Kalma_Filter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kalma_Filter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何建立属于自己的博客</title>
      <link href="/blog/2020/02/17/my-blog/"/>
      <url>/blog/2020/02/17/my-blog/</url>
      
        <content type="html"><![CDATA[<h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h1><p>​        搭建博客的准备事项如下：  </p><ul><li>Hexo</li><li>Node.js</li></ul><ul><li><p>github账号，或者gitee账号</p><p>本次所使用环境为Windows，linux也可按照同样的方式安装，步骤略有不同   </p></li></ul><h1 id="2-环境准备以及软件安装工作"><a href="#2-环境准备以及软件安装工作" class="headerlink" title="2.环境准备以及软件安装工作"></a>2.环境准备以及软件安装工作</h1><h2 id="2-1-git"><a href="#2-1-git" class="headerlink" title="2.1 git"></a>2.1 git</h2><p>​        前往<a href="https://git-scm.com/download">官网</a>下载对应操作系统的Git版本，此处无脑下一步即可</p><p>​        安装完成之后使用win+r组合键打开运行，输入cmd回车进入命令行，输入git会弹出如下信息，此为安装成功</p><p>​    <img src="5-17-1.png"></p><h2 id="2-2-Node-js"><a href="#2-2-Node-js" class="headerlink" title="2.2 Node.js"></a>2.2 Node.js</h2><p>前往<a href="https://nodejs.org/zh-cn/">官网</a>下载长期支持版，此处无脑下一步即可</p><h2 id="2-3-Hexo"><a href="#2-3-Hexo" class="headerlink" title="2.3 Hexo"></a>2.3 Hexo</h2><p>Git和Node.js安装成功之后，需要创建一个用来存放博客的文件夹，在此创建名为blog的文件夹，此处命名按个人喜好，但不要是中文，下面就可以开始安装Hexo了</p><p>打开所创建文件夹，下文中均以blog指代，右键点击Git Bash Here<del>注 在Git Bash中不能使用传统Ctrl+V进行粘贴，建议右键粘贴</del></p><p><code>npm install -g hexo-cli</code></p><p><code>hexo init</code></p><p>注 此处hexo init是用git clone拉取远端文件，建议在执行这一步之前先尝试如下几个链接，若能成功打开即可直接执行hexo init，若不能打开，建议修改Hosts文件</p><ul><li><p><a href="https://github.com/">git官网</a></p></li><li><p><a href="https://github.com/mashirozx/Sakura">gitclone</a></p><p>第一个能打开，第二个点击下图中Download ZIP，若能下载，则跳过如下步骤直接hexo init即可</p><p><img src="5-17-4.png"></p><p>如果github官网打不开建议魔法上网，然后再试一次，若还是不行建议访问<a href="https://www.ipaddress.com/">这个地址</a></p><p><img src="5-17-2.png"></p><p>输入github.com回车</p><p><img src="5-17-3.png"></p><p>复制图中 IP Address后面的内容，找到C盘(系统盘)C:\Windows\System32\drivers\etc路径下的HOSTS文件<del>这个文件并没有后缀，有后缀的文件为电脑杀毒软件留下的副本用于恢复的，可以可以不用管</del></p><p>右键用记事本打开，在最后一行输入：</p><p><code>*** github.com</code></p><p>将你刚才复制的IP地址粘贴到这个***的位置并保存，如果手动输入，记得千万要在IP地址和网址中间加上空格，操作完成后win+r打开命令行，断开魔法上网，输入ipconfig回车，在输入ping github.com，若能ping通，则直接打开github.com即可</p><p>若第二个无法下载，同样访问<a href="https://www.ipaddress.com/">这个地址</a></p><p>输入：</p><p><code>codeload.github.com</code></p><p><code>raw.githubusercontent.com</code></p><p>并重复上面那个步骤，将IP地址填入HOSTS文件当中，命令行执行ipconfig，在尝试一次下载</p><hr><p>上述步骤完成后，在Git Bash中输入：</p><p><code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</code></p><p>组合命令，hexo clean是清除缓存，hexo g生成博客静态内容，hexo s本地预览</p><p>这里如果是第一次运行，可能要等的久一点，成功之后会有一句：</p><p><code>INFO  Hexo is running at http://localhost:4000 . Press Ctrl+C to stop.</code></p><p>复制其中localhost:4000到浏览器中粘贴并回车，进行预览，同时如果在文件夹内修改内容也会上传到你正在预览的网页中，只需要刷新就可更新出新内容，这里Ctrl+C可以推出预览</p><p>放一张成功之后的图:</p><p><img src="zan.png"></p><hr><p>但这个时候，我们的网站只能我们自己看得见，想让别人看见我们需要将它推送到云端上去，这里选择国内访问较快的gitee</p></li></ul><h2 id="2-4-gitee配置"><a href="#2-4-gitee配置" class="headerlink" title="2.4 gitee配置"></a>2.4 gitee配置</h2><p>​        上<a href="https://gitee.com/">gitee主页</a>注册账户</p><p>​        创建一个仓库：</p><p>​        <img src="5-17-5.png"></p><p>​        仓库名称为：仓库名称和路径都可以按照自己喜好（别是中文就好）</p><p>​        <img src="5-17-6.png"></p><p>​        生成之后会有一个路径，复制下来</p><p>​        我们转到我们的blog文件夹，打开文件夹下的_config.yml</p><p>​        在最后一行deploy中修改type和repo的值</p><p>​        <code>type: git</code></p><p>​        <code>repo: https://gitee.com/****    # 仓库的URL</code></p><p>​        修改之后保存，这时候我们需要安装插件，在Git Bash中输入以下内容一个一个执行</p><p>​        <code>npm install hexo-deployer-git --save    # 安装git插件</code></p><p>​        <code>git config --global user.email *********@qq.com    # 设置gitee邮箱（gitee的注册邮箱）</code></p><p>​        <code>git config --global user.name '****'    # 设置用户名（git的注册昵称）</code></p><p>​        <code>hexo d    # 上传到gitee</code></p><p>​        在上传的过程中可能会弹出让你从新输入账号以及密码的窗口，输入就好，这一步可能时间有些长，不用担心放着让他继续进行就好</p><p>​        上传成功后，仓库中会有你本地blog的内容</p><p>​        点击图中位置的Gitee pages</p><p>​        <img src="5-17-7.png"></p><p>​        输入图中内容点击更新</p><p>​        <img src="5-17-8.png"></p><p>​        这时候点击出现的网站地址就好，本次网站建立到此结束</p><hr><h2 id="2-5-需要注意的地方"><a href="#2-5-需要注意的地方" class="headerlink" title="2.5 需要注意的地方"></a>2.5 需要注意的地方</h2><ul><li>如果过程中出了问题，改不回来了，就直接干掉本地的blog文件夹，从头再来一遍即可</li><li>若是修改了本地文件预览通过了，上传之后，记得更新Gitee Pages服务，才能生成，若是还没有反应，直接shift+f5刷新即可</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
